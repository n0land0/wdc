defaultStorageMapping: SOURCES
installedPackages: {}
jobs:
  Job-12:
    excludeSelector: ""
    id: 12
    includeSelector: "{T_SHIP_FEES_OPS_REPORT}"
    name: SHIP FEES OPS REPORT NIGHTLY REFRESH
    steps: []
    subgraphs: []
  Job-13:
    excludeSelector: ""
    id: 13
    includeSelector: "{subgraph: \"Paycom Labor Report\"}"
    name: PAYCOM LABOR REPORT NIGHTLY REFRESH
    steps: []
    subgraphs: []
  Job-16:
    excludeSelector: ""
    id: 16
    includeSelector: "{subgraph: \"Paycom Closed Period Labor Report\"}"
    name: PAYCOM CLOSED PERIOD LABOR REPORT NIGHTLY REFRESH
    steps: []
    subgraphs: []
  Job-17:
    excludeSelector: ""
    id: 17
    includeSelector: +{PSTG_HZ_LOCATIONS}
    name: HZ_LOCATIONS NIGHTLY REFRESH
    steps: []
    subgraphs: []
  Job-18:
    excludeSelector: ""
    id: 18
    includeSelector: "{subgraph: \"SVC_PROV_REVEEL\"}"
    name: REVEEL DATA WEEKLY REFRESH
    steps: []
    subgraphs: []
  Job-19:
    excludeSelector: ""
    id: 19
    includeSelector: "{subgraph: \"EOD Recap Report\"}"
    name: EOD RECAP REPORT NIGHTLY REFRESH
    steps: []
    subgraphs: []
  Job-5:
    excludeSelector: "+{INVOICES}+ OR +{PSTG_HZ_LOCATIONS} OR  +{SYSTEM_NOTES}+ OR +{SYSTEM_NOTES_CUSTOM}+ OR  +{SHIP_FEES_OPS_REPORT}+ OR  {subgraph: \"Paycom Labor Report\"} OR  {subgraph: \"Shipping Fee\"} OR {subgraph: \"Paycom Closed Period Labor Report\"}  OR  +{ T_CONTAINER_HISTORY }+ OR  +{ T_INVENTORY_SNAPSHOT }+ OR  +{ T_CARTON_HISTORY }+ OR  +{ T_KEWILL_ACTIVITY }+ OR  +{ T_HIGHJUMP_ACTIVITY }+ OR  +{ WEB_USAGE_DATA }+ OR  +{ XWS_SHIP_TRACKING_EVENTS }+ OR  +{ ERP_ORDER_SLA_NOTES }+ OR  +{ OE_PROCESSING_MSGS }+ OR {subgraph: \"EOD Recap Report\"}"
    id: 5
    includeSelector: "{nodetype:}"
    name: NIGHTLY REFRESH
    steps: []
    subgraphs: []
  Job-6:
    excludeSelector: ""
    id: 6
    includeSelector: ""
    name: ECOMMERCE BILLING JOB RUN
    steps: []
    subgraphs: []
locations:
  CLIENT_MDM:
    mappingDefinitions:
      "28":
        database: PROD_TRANSFORM
        schema: CLIENT_MDM
      "29":
        database: UAT_TRANSFORM
        schema: CLIENT_MDM
  PERSISTENT:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: PUBLIC
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: PUBLIC
  PERSISTENT_STAGING_ECOMMERCE:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: ECOMMERCE
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: ECOMMERCE
  PERSISTENT_STAGING_ECOMMERCE_ANWD:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: ECOMMERCE_ANWD
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: ECOMMERCE_ANWD
  PERSISTENT_STAGING_ECOMMERCE_EXTENDED_CWD:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: ECOMMERCE_CWD_EXTENDED_DATA
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: ECOMMERCE_CWD_EXTENDED_DATA
  PERSISTENT_STAGING_ECOMM_CWD_SMD_DBO:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: ECOMM_CWD_SMD_DBO
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: ECOMM_CWD_SMD_DBO
  PERSISTENT_STAGING_HUBSPOT:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: HUBSPOT
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: HUBSPOT
  PERSISTENT_STAGING_INTERCOM:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: INTERCOM
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: INTERCOM
  PERSISTENT_STAGING_NETSUITE:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: NETSUITE_SUITEANALYTICS
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: NETSUITE_SUITEANALYTICS
  PERSISTENT_STAGING_ORACLE:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: ORACLE
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: ORACLE
  PERSISTENT_STAGING_ORACLE_WMS:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: ORACLE_WMS
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: ORACLE_WMS
  PERSISTENT_STAGING_PAYCOM:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: PAYCOM
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: PAYCOM
  PERSISTENT_STAGING_RECURLY:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: RECURLY
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: RECURLY
  PERSISTENT_STAGING_SALESFORCE:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: SALESFORCE
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: SALESFORCE
  PERSISTENT_STAGING_SHAREPOINT:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: SHAREPOINT
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: SHAREPOINT
  PERSISTENT_STAGING_SVC_PROV_REVEEL:
    mappingDefinitions:
      "28":
        database: PROD_PERSISTENT_STAGING
        schema: REVEEL
      "29":
        database: UAT_PERSISTENT_STAGING
        schema: REVEEL
  PRESENTATION:
    mappingDefinitions:
      "28":
        database: PROD_PRESENTATION
        schema: PUBLIC
      "29":
        database: UAT_PRESENTATION
        schema: PUBLIC
  PRESENTATION_DIMENSION:
    mappingDefinitions:
      "28":
        database: PROD_PRESENTATION
        schema: DIMENSION
      "29":
        database: UAT_PRESENTATION
        schema: DIMENSION
  PRESENTATION_FACT:
    mappingDefinitions:
      "28":
        database: PROD_PRESENTATION
        schema: FACT
      "29":
        database: UAT_PRESENTATION
        schema: FACT
  REFERENCE_EXCEL_SOURCES:
    mappingDefinitions:
      "28":
        database: REFERENCE
        schema: EXCEL_SOURCES
      "29":
        database: REFERENCE
        schema: EXCEL_SOURCES
  REFERENCE_OVERRIDE:
    mappingDefinitions:
      "28":
        database: REFERENCE
        schema: OVERRIDES
      "29":
        database: REFERENCE
        schema: OVERRIDES
  SHIPPING_FEE_VIEW:
    mappingDefinitions:
      "28":
        database: PROD_PRESENTATION
        schema: REPORTS
      "29":
        database: UAT_PRESENTATION
        schema: REPORTS
  SOURCES:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: PUBLIC
      "29":
        database: UAT_SOURCES
        schema: PUBLIC
  SOURCES_ECOMMERCE:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ECOMMERCE
      "29":
        database: UAT_SOURCES
        schema: ECOMMERCE
  SOURCES_ECOMMERCE_ANWD:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ECOMMERCE_ANWD
      "29":
        database: UAT_SOURCES
        schema: ECOMMERCE_ANWD
  SOURCES_ECOMMERCE_EXTENDED_CWD:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ECOMMERCE_CWD_EXTENDED_DATA
      "29":
        database: UAT_SOURCES
        schema: ECOMMERCE_CWD_EXTENDED_DATA
  SOURCES_ECOMM_CWD_SMD_DBO:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ECOMM_CWD_SMD_DBO
      "29":
        database: UAT_SOURCES
        schema: ECOMM_CWD_SMD_DBO
  SOURCES_HUBSPOT:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: HUBSPOT
      "29":
        database: UAT_SOURCES
        schema: HUBSPOT
  SOURCES_INTERCOM:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: INTERCOM
      "29":
        database: UAT_SOURCES
        schema: INTERCOM
  SOURCES_NETSUITE:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: NETSUITE_SUITEANALYTICS
      "29":
        database: UAT_SOURCES
        schema: NETSUITE_SUITEANALYTICS
  SOURCES_ORACLE_APPLSYS:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_APPLSYS
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_APPLSYS
  SOURCES_ORACLE_AR:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_AR
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_AR
  SOURCES_ORACLE_BOM:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_BOM
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_BOM
  SOURCES_ORACLE_HR:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_HR
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_HR
  SOURCES_ORACLE_INV:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_INV
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_INV
  SOURCES_ORACLE_ONT:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_ONT
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_ONT
  SOURCES_ORACLE_PO:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_PO
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_PO
  SOURCES_ORACLE_WMS:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_WMS_DBO
      "29":
        database: UAT_SOURCES
        schema: ORACLE_WMS_DBO
  SOURCES_ORACLE_XNET:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_XNET
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_XNET
  SOURCES_ORACLE_XWS:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: ORACLE_OMS_NEW_XWS
      "29":
        database: UAT_SOURCES
        schema: ORACLE_OMS_NEW_XWS
  SOURCES_PAYCOM:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: PAYCOM
      "29":
        database: UAT_SOURCES
        schema: PAYCOM
  SOURCES_RECURLY:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: RECURLY
      "29":
        database: UAT_SOURCES
        schema: RECURLY
  SOURCES_SALESFORCE:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: SALESFORCE
      "29":
        database: UAT_SOURCES
        schema: SALESFORCE
  SOURCES_SFTP:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: SFTP
      "29":
        database: UAT_SOURCES
        schema: SFTP
  SOURCES_SHAREPOINT:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: SHAREPOINT
      "29":
        database: UAT_SOURCES
        schema: SHAREPOINT
  SOURCES_SVC_PROV_REVEEL:
    mappingDefinitions:
      "28":
        database: PROD_SOURCES
        schema: REVEEL
      "29":
        database: UAT_SOURCES
        schema: REVEEL
  TEST_TEMP:
    mappingDefinitions:
      "28":
        database: TEST_TEMP
        schema: TEST
      "29":
        database: TEST_TEMP
        schema: TEST
  TRANSFORM:
    mappingDefinitions:
      "28":
        database: PROD_TRANSFORM
        schema: PUBLIC
      "29":
        database: UAT_TRANSFORM
        schema: PUBLIC
  TRANSFORM_DIMENSION:
    mappingDefinitions:
      "28":
        database: PROD_TRANSFORM
        schema: DIMENSION
      "29":
        database: UAT_TRANSFORM
        schema: DIMENSION
  TRANSFORM_FACT:
    mappingDefinitions:
      "28":
        database: PROD_TRANSFORM
        schema: FACT
      "29":
        database: UAT_TRANSFORM
        schema: FACT
macros: {}
packages: {}
projects: {}
stepTypes:
  StepType-18:
    id: "18"
    isDisabled: false
    metadata:
      defaultStorageLocation: PERSISTENT
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: changeTrackingColumns
            displayName: 'Change Tracking'
            attributeName: 'isChangeTracking'
            isRequired: false
            enableIf: 'true'

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: PH Persistent Stage
    version: 1
  StepType-22:
    id: "22"
    isDisabled: false
    metadata:
      defaultStorageLocation: TRANSFORM
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Copy of Fact
    version: 1
  StepType-23:
    id: "23"
    isDisabled: false
    metadata:
      defaultStorageLocation: TRANSFORM
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Dimension
    version: 1
  StepType-24:
    id: "24"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Copy of View
    version: 1
  StepType-25:
    id: "25"
    isDisabled: false
    metadata:
      defaultStorageLocation: TRANSFORM
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: toggleButton
            displayName: Distinct
            attributeName: selectDistinct

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% else %}
                {{ stage('Create Table') }}
                CREATE OR REPLACE table {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% if config.selectDistinct %} DISTINCT {% endif %}
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage (Distinct)
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-10:
    id: "10"
    name: Netsuite N,O,P,Q Tables
    steps:
      - "2735"
      - "2736"
      - "2737"
      - "2738"
      - "2739"
      - "2740"
      - "2741"
      - "2742"
      - "2743"
      - "2744"
      - "2745"
      - "2746"
      - "2747"
      - "2748"
      - "2749"
      - "2750"
      - "2751"
      - "2752"
      - "2753"
      - "2754"
      - "2755"
      - "2756"
      - "2757"
      - "2758"
      - "2759"
      - "2760"
      - "2761"
      - "2762"
      - "2763"
      - "2764"
      - "2765"
      - "2766"
      - "2767"
      - "2768"
      - "2769"
      - "2770"
      - "2771"
      - "2772"
      - "2773"
      - "2774"
      - "2775"
      - "2776"
      - "2777"
      - "2778"
      - "2779"
      - "2780"
      - "2781"
      - "2782"
      - "2783"
      - "2784"
      - "2785"
      - "2786"
      - "2787"
      - "2788"
      - "2789"
      - "2790"
      - "2791"
      - "2792"
      - "2793"
      - "2794"
      - "2795"
      - "2796"
      - "2797"
      - "2798"
      - "2799"
      - "2800"
      - "2801"
      - "2802"
      - "2803"
      - "2804"
      - "2805"
      - "2806"
      - "2807"
      - "2808"
      - "2809"
      - "2810"
      - "2811"
      - "2812"
      - "2813"
      - "2814"
      - "2815"
      - "2816"
      - "2817"
      - "2818"
      - "2819"
      - "2820"
      - "2821"
      - "2822"
      - "2823"
      - "2824"
      - "2825"
      - "2826"
      - "2827"
      - "2828"
      - "2829"
      - "2830"
      - "2831"
      - "2832"
      - "2833"
      - "2834"
      - "2835"
      - "2836"
      - "2837"
      - "2838"
      - "2839"
      - "2840"
      - "2841"
      - "2842"
      - "2843"
      - "2844"
      - "2845"
      - "2846"
      - "2847"
      - "2848"
      - "2849"
      - "2850"
      - "2851"
      - "3675"
      - "3677"
      - "3760"
      - "3761"
      - "3762"
      - "3763"
      - "3764"
      - "3765"
      - "3766"
      - "3767"
      - "3768"
      - "3769"
      - "3770"
      - "3771"
      - "3772"
      - "3773"
      - "3774"
      - "3775"
      - "3776"
      - "3777"
      - "3778"
      - "3779"
      - "3780"
      - "3781"
      - "3782"
      - "3783"
      - "3784"
      - "3785"
      - "3786"
      - "3787"
      - "3788"
      - "3789"
      - "3790"
      - "3791"
      - "4201"
      - "4202"
      - "4203"
      - "4204"
      - "4205"
      - "4206"
      - "4207"
      - "4208"
      - "4209"
      - "4210"
      - "4211"
      - "4212"
      - "4213"
      - "4214"
      - "4215"
      - "4216"
      - "4217"
      - "4218"
      - "4219"
      - "4220"
      - "4221"
      - "4222"
      - "4223"
      - "4224"
      - "4225"
      - "4226"
      - "4227"
      - "4228"
      - "4229"
      - "4230"
      - "4231"
      - "4232"
      - "4233"
      - "4234"
      - "4235"
      - "4236"
      - "4237"
      - "4238"
      - "4239"
      - "4240"
      - "4241"
      - "4242"
      - "4243"
      - "4244"
      - "4245"
      - "4246"
      - "4247"
      - "4248"
      - "4249"
      - "4250"
      - "4251"
      - "4252"
      - "4253"
      - "4254"
      - "4255"
      - "4256"
      - "4257"
      - "4258"
      - "4259"
      - "4260"
      - "4261"
      - "4262"
      - "4263"
      - "4264"
      - "4265"
      - "4266"
      - "4267"
      - "4268"
      - "4269"
      - "4270"
      - "4271"
      - "4272"
      - "4273"
      - "4274"
      - "4275"
      - "4276"
      - "4277"
      - "4278"
      - "4279"
      - "4280"
      - "4281"
      - "4282"
      - "4283"
      - "4284"
      - "4289"
  Subgraph-11:
    id: "11"
    name: Netsuite R,S Tables
    steps:
      - "2852"
      - "2853"
      - "2854"
      - "2855"
      - "2856"
      - "2857"
      - "2858"
      - "2859"
      - "2860"
      - "2861"
      - "2862"
      - "2863"
      - "2864"
      - "2865"
      - "2866"
      - "2867"
      - "2868"
      - "2869"
      - "2870"
      - "2871"
      - "2872"
      - "2873"
      - "2874"
      - "2875"
      - "2876"
      - "2877"
      - "2878"
      - "2879"
      - "2880"
      - "2881"
      - "2882"
      - "2883"
      - "2884"
      - "2885"
      - "2886"
      - "2887"
      - "2888"
      - "2889"
      - "2890"
      - "2891"
      - "2892"
      - "2893"
      - "2894"
      - "2895"
      - "2896"
      - "2897"
      - "2898"
      - "2899"
      - "2900"
      - "2901"
      - "2902"
      - "2903"
      - "2904"
      - "2905"
      - "2906"
      - "2907"
      - "2908"
      - "2909"
      - "2910"
      - "2911"
      - "2912"
      - "2913"
      - "2914"
      - "2915"
      - "2916"
      - "2917"
      - "2918"
      - "2919"
      - "2920"
      - "2921"
      - "2922"
      - "2923"
      - "2924"
      - "2925"
      - "2926"
      - "2927"
      - "2928"
      - "2929"
      - "2930"
      - "2931"
      - "2932"
      - "2933"
      - "2934"
      - "2935"
      - "2936"
      - "2937"
      - "3939"
      - "3940"
      - "3941"
      - "3942"
      - "3943"
      - "3944"
      - "3945"
      - "3946"
      - "3947"
      - "3948"
      - "3949"
      - "3950"
      - "3951"
      - "3952"
      - "3953"
      - "3954"
      - "3955"
      - "3956"
      - "3957"
      - "3958"
      - "3959"
      - "3960"
      - "3961"
      - "3962"
      - "3963"
      - "3964"
      - "3965"
      - "3966"
      - "3967"
      - "3968"
      - "3969"
      - "3970"
      - "3971"
      - "3972"
      - "3973"
      - "3974"
      - "3975"
      - "3976"
      - "3977"
      - "3978"
      - "3979"
      - "3980"
      - "3981"
      - "3982"
      - "3983"
      - "3984"
      - "3985"
      - "3986"
      - "3987"
      - "3988"
      - "3989"
      - "3990"
      - "3991"
      - "3992"
      - "3993"
      - "3994"
      - "3995"
      - "3996"
      - "3997"
      - "3998"
      - "3999"
      - "4000"
      - "4001"
      - "4002"
      - "4003"
      - "4004"
      - "4005"
      - "4006"
      - "4007"
      - "4008"
      - "4009"
      - "4010"
      - "4011"
      - "4012"
      - "4013"
      - "4014"
      - "4015"
      - "4016"
      - "4017"
      - "4018"
      - "4019"
      - "4020"
      - "4021"
      - "4022"
      - "4023"
      - "3912"
      - "4020"
  Subgraph-12:
    id: "12"
    name: Netsuite T,U,V,W,X,Y,Z Tables
    steps:
      - "2938"
      - "2939"
      - "2940"
      - "2941"
      - "2942"
      - "2943"
      - "2944"
      - "2945"
      - "2946"
      - "2947"
      - "2948"
      - "2949"
      - "2950"
      - "2951"
      - "2952"
      - "2953"
      - "2954"
      - "2955"
      - "2956"
      - "2957"
      - "2958"
      - "2959"
      - "2960"
      - "2961"
      - "2962"
      - "2963"
      - "2964"
      - "2965"
      - "2966"
      - "2967"
      - "2968"
      - "2969"
      - "2970"
      - "2971"
      - "2972"
      - "2973"
      - "2974"
      - "2975"
      - "2976"
      - "2977"
      - "2978"
      - "2979"
      - "2980"
      - "2981"
      - "2982"
      - "2983"
      - "2984"
      - "2985"
      - "2986"
      - "2987"
      - "2988"
      - "2989"
      - "2990"
      - "2991"
      - "2992"
      - "2993"
      - "2994"
      - "2995"
      - "2996"
      - "2997"
      - "2998"
      - "2999"
      - "3000"
      - "3001"
      - "3002"
      - "3003"
      - "3004"
      - "3005"
      - "3006"
      - "3007"
      - "3008"
      - "3009"
      - "3010"
      - "3011"
      - "3012"
      - "3013"
      - "3014"
      - "3015"
      - "3016"
      - "3017"
      - "3018"
      - "3019"
      - "3020"
      - "3021"
      - "3585"
      - "3586"
      - "3587"
      - "3588"
      - "3589"
      - "3590"
      - "3591"
      - "3592"
      - "3593"
      - "3594"
      - "3595"
      - "3596"
      - "3597"
      - "3598"
      - "3599"
      - "3600"
      - "3601"
      - "3602"
      - "3603"
      - "3604"
      - "3605"
      - "3606"
      - "3607"
      - "3608"
      - "3609"
      - "3610"
      - "3611"
      - "3612"
      - "3613"
      - "3614"
      - "3615"
      - "3616"
      - "3617"
      - "3618"
      - "3619"
      - "3620"
      - "3621"
      - "3622"
      - "3623"
      - "3624"
      - "3625"
      - "3626"
      - "3627"
      - "3628"
      - "3629"
      - "3630"
      - "3631"
      - "3632"
      - "3633"
      - "3634"
      - "3635"
      - "3636"
      - "3637"
      - "3638"
      - "3639"
      - "3640"
      - "3641"
      - "3642"
      - "3643"
      - "3644"
      - "3645"
      - "3646"
      - "3647"
      - "3648"
      - "3649"
      - "3650"
      - "3651"
      - "3652"
      - "3653"
      - "3654"
      - "3655"
      - "3656"
      - "3657"
      - "3658"
      - "3659"
      - "3660"
      - "3661"
      - "3662"
      - "3663"
      - "3664"
      - "3665"
      - "3666"
      - "3667"
      - "3668"
  Subgraph-13:
    id: "13"
    name: Hubspot Tables
    steps:
      - "1498"
      - "1499"
      - "1500"
      - "1501"
      - "1503"
      - "1504"
      - "1505"
      - "1506"
      - "1507"
      - "1508"
      - "1510"
      - "1511"
      - "1512"
      - "1513"
      - "1514"
      - "1515"
      - "1516"
      - "1517"
      - "1518"
      - "1519"
      - "1520"
      - "1521"
      - "1522"
      - "1523"
      - "1524"
      - "1525"
      - "1526"
      - "1527"
      - "1528"
      - "1529"
      - "1530"
      - "1531"
      - "1532"
      - "1533"
      - "1534"
      - "1535"
      - "1536"
      - "1537"
      - "1538"
      - "1539"
      - "1540"
      - "1541"
      - "1542"
      - "1543"
      - "1544"
      - "1545"
      - "1546"
      - "1547"
      - "1548"
      - "1549"
      - "1550"
      - "1551"
      - "1552"
      - "1553"
      - "1554"
      - "1555"
      - "1556"
      - "1557"
      - "1558"
      - "1559"
      - "1560"
      - "1561"
      - "1562"
      - "1563"
      - "1564"
      - "1565"
      - "1566"
      - "1567"
      - "1568"
      - "1569"
      - "1570"
      - "1595"
      - "1596"
      - "1597"
      - "1598"
      - "1599"
      - "1600"
      - "1601"
      - "1602"
      - "1603"
      - "1604"
      - "1605"
      - "1606"
      - "1607"
      - "1608"
      - "1609"
      - "1610"
      - "1611"
      - "1612"
      - "1613"
      - "1614"
      - "1615"
      - "1616"
      - "1617"
      - "1618"
      - "1619"
      - "1620"
      - "1621"
      - "1622"
      - "1623"
      - "1624"
      - "1625"
      - "1626"
      - "1627"
      - "1628"
      - "1629"
      - "1630"
      - "1631"
      - "1632"
      - "1633"
      - "1634"
      - "1635"
      - "1636"
      - "1637"
      - "1638"
      - "1639"
      - "1640"
      - "1641"
      - "1642"
      - "1643"
      - "1644"
      - "1645"
      - "1646"
      - "1647"
      - "1648"
      - "1649"
      - "1650"
      - "1651"
      - "1652"
      - "1653"
      - "1654"
      - "1655"
      - "1656"
      - "1657"
      - "1658"
      - "1659"
      - "1660"
      - "1661"
      - "1662"
      - "1663"
      - "1664"
      - "1665"
      - "1593"
      - "1594"
      - "5682"
      - "5684"
      - "5685"
      - "5686"
  Subgraph-15:
    id: "15"
    name: FULFILLMENT_BILLING
    steps:
      - "2718"
      - "3563"
      - "3921"
      - "2470"
      - "3012"
      - "3013"
      - "3308"
      - "3659"
      - "3660"
      - "3915"
      - "3916"
      - "3922"
      - "3924"
      - "3926"
      - "3927"
      - "3928"
      - "4029"
      - "4029"
      - "4030"
      - 4965
      - "4965"
      - "4985"
      - "4986"
      - "4987"
      - "5099"
      - "5100"
      - "5101"
  Subgraph-17:
    id: "17"
    name: DIMENSION
    steps:
      - "3921"
      - "3922"
  Subgraph-20:
    id: "20"
    name: Netsuite All
    steps:
      - "2344"
      - "2345"
      - "2346"
      - "2347"
      - "2348"
      - "2349"
      - "2350"
      - "2351"
      - "2352"
      - "2353"
      - "2354"
      - "2355"
      - "2356"
      - "2357"
      - "2358"
      - "2359"
      - "2360"
      - "2361"
      - "2362"
      - "2363"
      - "2364"
      - "2365"
      - "2366"
      - "2367"
      - "2368"
      - "2369"
      - "2370"
      - "2371"
      - "2372"
      - "2373"
      - "2374"
      - "2375"
      - "2376"
      - "2377"
      - "2378"
      - "2379"
      - "2380"
      - "2381"
      - "2382"
      - "2383"
      - "2384"
      - "2385"
      - "2386"
      - "2387"
      - "2388"
      - "2389"
      - "2390"
      - "2391"
      - "2392"
      - "2393"
      - "2394"
      - "2395"
      - "2396"
      - "2397"
      - "2398"
      - "2399"
      - "2400"
      - "2401"
      - "2402"
      - "2403"
      - "2404"
      - "2405"
      - "2406"
      - "2407"
      - "2408"
      - "2409"
      - "2410"
      - "2411"
      - "2412"
      - "2413"
      - "2414"
      - "2415"
      - "2416"
      - "2417"
      - "2418"
      - "2419"
      - "2420"
      - "2421"
      - "2422"
      - "2423"
      - "2424"
      - "2425"
      - "2426"
      - "2427"
      - "2428"
      - "2429"
      - "2430"
      - "2431"
      - "2432"
      - "2433"
      - "2434"
      - "2435"
      - "2436"
      - "2437"
      - "2438"
      - "2439"
      - "2440"
      - "2441"
      - "2442"
      - "2443"
      - "2444"
      - "2445"
      - "2446"
      - "2447"
      - "2448"
      - "2449"
      - "2450"
      - "2451"
      - "2452"
      - "2453"
      - "2454"
      - "2455"
      - "2456"
      - "2457"
      - "2458"
      - "2459"
      - "2460"
      - "2461"
      - "2462"
      - "2463"
      - "2464"
      - "2465"
      - "2466"
      - "2467"
      - "2468"
      - "2469"
      - "2470"
      - "2471"
      - "2472"
      - "2473"
      - "2474"
      - "2475"
      - "2476"
      - "2477"
      - "2478"
      - "2479"
      - "2480"
      - "2481"
      - "2482"
      - "2483"
      - "2484"
      - "2485"
      - "2486"
      - "2487"
      - "2488"
      - "2489"
      - "2490"
      - "2491"
      - "2492"
      - "2493"
      - "2494"
      - "2495"
      - "2496"
      - "2497"
      - "2498"
      - "2499"
      - "2500"
      - "2501"
      - "2502"
      - "2503"
      - "2504"
      - "2505"
      - "2506"
      - "2507"
      - "2508"
      - "2509"
      - "2510"
      - "2511"
      - "2512"
      - "2513"
      - "2514"
      - "2515"
      - "2516"
      - "2517"
      - "2518"
      - "2519"
      - "2520"
      - "2521"
      - "2522"
      - "2523"
      - "2524"
      - "2525"
      - "2526"
      - "2527"
      - "2528"
      - "2529"
      - "2530"
      - "2531"
      - "2532"
      - "2533"
      - "2534"
      - "2535"
      - "2536"
      - "2537"
      - "2538"
      - "2539"
      - "2540"
      - "2541"
      - "2542"
      - "2543"
      - "2544"
      - "2545"
      - "2546"
      - "2547"
      - "2548"
      - "2549"
      - "2550"
      - "2551"
      - "2552"
      - "2553"
      - "2554"
      - "2555"
      - "2556"
      - "2557"
      - "2558"
      - "2559"
      - "2560"
      - "2561"
      - "2562"
      - "2563"
      - "2564"
      - "2565"
      - "2566"
      - "2567"
      - "2568"
      - "2569"
      - "2570"
      - "2571"
      - "2572"
      - "2573"
      - "2574"
      - "2575"
      - "2576"
      - "2577"
      - "2578"
      - "2579"
      - "2580"
      - "2581"
      - "2582"
      - "2583"
      - "2584"
      - "2585"
      - "2586"
      - "2587"
      - "2588"
      - "2589"
      - "2590"
      - "2591"
      - "2592"
      - "2593"
      - "2594"
      - "2595"
      - "2596"
      - "2597"
      - "2598"
      - "2599"
      - "2600"
      - "2601"
      - "2602"
      - "2603"
      - "2604"
      - "2605"
      - "2606"
      - "2607"
      - "2608"
      - "2609"
      - "2610"
      - "2611"
      - "2612"
      - "2613"
      - "2614"
      - "2615"
      - "2616"
      - "2617"
      - "2618"
      - "2619"
      - "2620"
      - "2621"
      - "2622"
      - "2623"
      - "2624"
      - "2625"
      - "2626"
      - "2627"
      - "2628"
      - "2629"
      - "2630"
      - "2631"
      - "2632"
      - "2633"
      - "2634"
      - "2635"
      - "2636"
      - "2637"
      - "2638"
      - "2639"
      - "2640"
      - "2641"
      - "2642"
      - "2643"
      - "2644"
      - "2645"
      - "2646"
      - "2647"
      - "2648"
      - "2649"
      - "2650"
      - "2651"
      - "2652"
      - "2653"
      - "2654"
      - "2655"
      - "2656"
      - "2657"
      - "2658"
      - "2659"
      - "2660"
      - "2661"
      - "2662"
      - "2663"
      - "2664"
      - "2665"
      - "2666"
      - "2667"
      - "2668"
      - "2669"
      - "2670"
      - "2671"
      - "2672"
      - "2673"
      - "2674"
      - "2675"
      - "2676"
      - "2677"
      - "2678"
      - "2679"
      - "2680"
      - "2681"
      - "2682"
      - "2683"
      - "2684"
      - "2685"
      - "2686"
      - "2687"
      - "2688"
      - "2689"
      - "2690"
      - "2691"
      - "2692"
      - "2693"
      - "2694"
      - "2695"
      - "2696"
      - "2697"
      - "2698"
      - "2699"
      - "2700"
      - "2701"
      - "2702"
      - "2703"
      - "2704"
      - "2705"
      - "2706"
      - "2707"
      - "2708"
      - "2709"
      - "2710"
      - "2711"
      - "2712"
      - "2713"
      - "2714"
      - "2715"
      - "2716"
      - "2717"
      - "2718"
      - "2719"
      - "2720"
      - "2721"
      - "2722"
      - "2723"
      - "2724"
      - "2725"
      - "2726"
      - "2727"
      - "2728"
      - "2729"
      - "2730"
      - "2731"
      - "2732"
      - "2733"
      - "2734"
      - "2735"
      - "2736"
      - "2737"
      - "2738"
      - "2739"
      - "2740"
      - "2741"
      - "2742"
      - "2743"
      - "2744"
      - "2745"
      - "2746"
      - "2747"
      - "2748"
      - "2749"
      - "2750"
      - "2751"
      - "2752"
      - "2753"
      - "2754"
      - "2755"
      - "2756"
      - "2757"
      - "2758"
      - "2759"
      - "2760"
      - "2761"
      - "2762"
      - "2763"
      - "2764"
      - "2765"
      - "2766"
      - "2767"
      - "2768"
      - "2769"
      - "2770"
      - "2771"
      - "2772"
      - "2773"
      - "2774"
      - "2775"
      - "2776"
      - "2777"
      - "2778"
      - "2779"
      - "2780"
      - "2781"
      - "2782"
      - "2783"
      - "2784"
      - "2785"
      - "2786"
      - "2787"
      - "2788"
      - "2789"
      - "2790"
      - "2791"
      - "2792"
      - "2793"
      - "2794"
      - "2795"
      - "2796"
      - "2797"
      - "2798"
      - "2799"
      - "2800"
      - "2801"
      - "2802"
      - "2803"
      - "2804"
      - "2805"
      - "2806"
      - "2807"
      - "2808"
      - "2809"
      - "2810"
      - "2811"
      - "2812"
      - "2813"
      - "2814"
      - "2815"
      - "2816"
      - "2817"
      - "2818"
      - "2819"
      - "2820"
      - "2821"
      - "2822"
      - "2823"
      - "2824"
      - "2825"
      - "2826"
      - "2827"
      - "2828"
      - "2829"
      - "2830"
      - "2831"
      - "2832"
      - "2833"
      - "2834"
      - "2835"
      - "2836"
      - "2837"
      - "2838"
      - "2839"
      - "2840"
      - "2841"
      - "2842"
      - "2843"
      - "2844"
      - "2845"
      - "2846"
      - "2847"
      - "2848"
      - "2849"
      - "2850"
      - "2851"
      - "2852"
      - "2853"
      - "2854"
      - "2855"
      - "2856"
      - "2857"
      - "2858"
      - "2859"
      - "2860"
      - "2861"
      - "2862"
      - "2863"
      - "2864"
      - "2865"
      - "2866"
      - "2867"
      - "2868"
      - "2869"
      - "2870"
      - "2871"
      - "2872"
      - "2873"
      - "2874"
      - "2875"
      - "2876"
      - "2877"
      - "2878"
      - "2879"
      - "2880"
      - "2881"
      - "2882"
      - "2883"
      - "2884"
      - "2885"
      - "2886"
      - "2887"
      - "2888"
      - "2889"
      - "2890"
      - "2891"
      - "2892"
      - "2893"
      - "2894"
      - "2895"
      - "2896"
      - "2897"
      - "2898"
      - "2899"
      - "2900"
      - "2901"
      - "2902"
      - "2903"
      - "2904"
      - "2905"
      - "2906"
      - "2907"
      - "2908"
      - "2909"
      - "2910"
      - "2911"
      - "2912"
      - "2913"
      - "2914"
      - "2915"
      - "2916"
      - "2917"
      - "2918"
      - "2919"
      - "2920"
      - "2921"
      - "2922"
      - "2924"
      - "2925"
      - "2926"
      - "2927"
      - "2928"
      - "2929"
      - "2930"
      - "2931"
      - "2932"
      - "2933"
      - "2934"
      - "2935"
      - "2936"
      - "2937"
      - "2938"
      - "2939"
      - "2940"
      - "2941"
      - "2942"
      - "2943"
      - "2944"
      - "2945"
      - "2946"
      - "2947"
      - "2948"
      - "2949"
      - "2950"
      - "2951"
      - "2952"
      - "2953"
      - "2954"
      - "2955"
      - "2956"
      - "2957"
      - "2958"
      - "2959"
      - "2960"
      - "2961"
      - "2962"
      - "2963"
      - "2964"
      - "2965"
      - "2966"
      - "2967"
      - "2968"
      - "2969"
      - "2970"
      - "2971"
      - "2972"
      - "2973"
      - "2974"
      - "2975"
      - "2976"
      - "2977"
      - "2978"
      - "2979"
      - "2980"
      - "2981"
      - "2982"
      - "2983"
      - "2984"
      - "2985"
      - "2986"
      - "2987"
      - "2988"
      - "2989"
      - "2990"
      - "2991"
      - "2992"
      - "2993"
      - "2994"
      - "2995"
      - "2996"
      - "2997"
      - "2998"
      - "2999"
      - "3000"
      - "3001"
      - "3002"
      - "3003"
      - "3004"
      - "3005"
      - "3006"
      - "3007"
      - "3008"
      - "3009"
      - "3010"
      - "3011"
      - "3012"
      - "3013"
      - "3014"
      - "3015"
      - "3016"
      - "3017"
      - "3018"
      - "3019"
      - "3020"
      - "3021"
      - "3022"
      - "3023"
      - "3024"
      - "3025"
      - "3026"
      - "3027"
      - "3028"
      - "3029"
      - "3030"
      - "3031"
      - "3032"
      - "3033"
      - "3034"
      - "3035"
      - "3036"
      - "3037"
      - "3038"
      - "3039"
      - "3040"
      - "3041"
      - "3042"
      - "3043"
      - "3044"
      - "3045"
      - "3046"
      - "3047"
      - "3048"
      - "3049"
      - "3050"
      - "3051"
      - "3052"
      - "3053"
      - "3054"
      - "3055"
      - "3056"
      - "3057"
      - "3058"
      - "3059"
      - "3060"
      - "3061"
      - "3062"
      - "3063"
      - "3224"
      - "3225"
      - "3226"
      - "3227"
      - "3228"
      - "3229"
      - "3230"
      - "3231"
      - "3232"
      - "3233"
      - "3234"
      - "3235"
      - "3236"
      - "3237"
      - "3238"
      - "3239"
      - "3240"
      - "3241"
      - "3242"
      - "3243"
      - "3244"
      - "3245"
      - "3246"
      - "3247"
      - "3248"
      - "3249"
      - "3250"
      - "3251"
      - "3252"
      - "3253"
      - "3254"
      - "3255"
      - "3256"
      - "3257"
      - "3258"
      - "3259"
      - "3260"
      - "3261"
      - "3262"
      - "3263"
      - "3264"
      - "3265"
      - "3266"
      - "3267"
      - "3268"
      - "3269"
      - "3270"
      - "3271"
      - "3272"
      - "3273"
      - "3274"
      - "3275"
      - "3276"
      - "3277"
      - "3278"
      - "3279"
      - "3280"
      - "3281"
      - "3282"
      - "3283"
      - "3284"
      - "3285"
      - "3286"
      - "3287"
      - "3288"
      - "3289"
      - "3290"
      - "3291"
      - "3292"
      - "3293"
      - "3294"
      - "3295"
      - "3296"
      - "3297"
      - "3298"
      - "3299"
      - "3300"
      - "3301"
      - "3302"
      - "3303"
      - "3304"
      - "3305"
      - "3306"
      - "3307"
      - "3308"
      - "3309"
      - "3310"
      - "3311"
      - "3312"
      - "3313"
      - "3314"
      - "3315"
      - "3316"
      - "3317"
      - "3318"
      - "3319"
      - "3320"
      - "3321"
      - "3322"
      - "3323"
      - "3324"
      - "3325"
      - "3326"
      - "3327"
      - "3328"
      - "3329"
      - "3330"
      - "3331"
      - "3332"
      - "3333"
      - "3334"
      - "3335"
      - "3336"
      - "3337"
      - "3338"
      - "3339"
      - "3340"
      - "3341"
      - "3342"
      - "3343"
      - "3344"
      - "3345"
      - "3346"
      - "3347"
      - "3348"
      - "3349"
      - "3350"
      - "3351"
      - "3352"
      - "3353"
      - "3354"
      - "3355"
      - "3356"
      - "3357"
      - "3358"
      - "3359"
      - "3360"
      - "3361"
      - "3365"
      - "3366"
      - "3367"
      - "3368"
      - "3369"
      - "3370"
      - "3371"
      - "3372"
      - "3373"
      - "3374"
      - "3375"
      - "3376"
      - "3377"
      - "3378"
      - "3379"
      - "3380"
      - "3381"
      - "3382"
      - "3383"
      - "3384"
      - "3385"
      - "3386"
      - "3387"
      - "3388"
      - "3389"
      - "3390"
      - "3391"
      - "3392"
      - "3393"
      - "3394"
      - "3395"
      - "3396"
      - "3397"
      - "3398"
      - "3399"
      - "3400"
      - "3401"
      - "3402"
      - "3403"
      - "3404"
      - "3405"
      - "3406"
      - "3407"
      - "3408"
      - "3409"
      - "3410"
      - "3411"
      - "3412"
      - "3413"
      - "3414"
      - "3415"
      - "3416"
      - "3417"
      - "3418"
      - "3419"
      - "3420"
      - "3421"
      - "3422"
      - "3423"
      - "3424"
      - "3425"
      - "3426"
      - "3427"
      - "3428"
      - "3429"
      - "3430"
      - "3431"
      - "3432"
      - "3433"
      - "3434"
      - "3435"
      - "3436"
      - "3437"
      - "3438"
      - "3439"
      - "3440"
      - "3441"
      - "3442"
      - "3443"
      - "3444"
      - "3445"
      - "3446"
      - "3447"
      - "3448"
      - "3449"
      - "3450"
      - "3451"
      - "3452"
      - "3453"
      - "3454"
      - "3455"
      - "3456"
      - "3457"
      - "3458"
      - "3459"
      - "3460"
      - "3461"
      - "3462"
      - "3463"
      - "3464"
      - "3465"
      - "3466"
      - "3467"
      - "3468"
      - "3469"
      - "3470"
      - "3471"
      - "3472"
      - "3473"
      - "3474"
      - "3475"
      - "3476"
      - "3477"
      - "3478"
      - "3479"
      - "3480"
      - "3481"
      - "3482"
      - "3483"
      - "3484"
      - "3485"
      - "3486"
      - "3487"
      - "3488"
      - "3489"
      - "3490"
      - "3491"
      - "3492"
      - "3493"
      - "3494"
      - "3495"
      - "3496"
      - "3501"
      - "3502"
      - "3503"
      - "3504"
      - "3505"
      - "3506"
      - "3507"
      - "3508"
      - "3509"
      - "3510"
      - "3511"
      - "3512"
      - "3513"
      - "3514"
      - "3515"
      - "3516"
      - "3517"
      - "3518"
      - "3519"
      - "3520"
      - "3521"
      - "3522"
      - "3523"
      - "3524"
      - "3525"
      - "3526"
      - "3527"
      - "3528"
      - "3529"
      - "3530"
      - "3531"
      - "3532"
      - "3533"
      - "3534"
      - "3535"
      - "3536"
      - "3537"
      - "3538"
      - "3539"
      - "3540"
      - "3541"
      - "3542"
      - "3543"
      - "3544"
      - "3545"
      - "3546"
      - "3547"
      - "3548"
      - "3549"
      - "3550"
      - "3551"
      - "3552"
      - "3553"
      - "3554"
      - "3555"
      - "3556"
      - "3557"
      - "3558"
      - "3559"
      - "3560"
      - "3561"
      - "3562"
      - "3563"
      - "3564"
      - "3565"
      - "3566"
      - "3567"
      - "3568"
      - "3569"
      - "3570"
      - "3571"
      - "3572"
      - "3573"
      - "3574"
      - "3575"
      - "3576"
      - "3577"
      - "3578"
      - "3579"
      - "3585"
      - "3586"
      - "3587"
      - "3588"
      - "3589"
      - "3590"
      - "3591"
      - "3592"
      - "3593"
      - "3594"
      - "3595"
      - "3596"
      - "3597"
      - "3598"
      - "3599"
      - "3600"
      - "3601"
      - "3602"
      - "3603"
      - "3604"
      - "3605"
      - "3606"
      - "3607"
      - "3608"
      - "3609"
      - "3610"
      - "3611"
      - "3612"
      - "3613"
      - "3614"
      - "3615"
      - "3616"
      - "3617"
      - "3618"
      - "3619"
      - "3620"
      - "3621"
      - "3622"
      - "3623"
      - "3624"
      - "3625"
      - "3626"
      - "3627"
      - "3628"
      - "3629"
      - "3630"
      - "3631"
      - "3632"
      - "3633"
      - "3634"
      - "3635"
      - "3636"
      - "3637"
      - "3638"
      - "3639"
      - "3640"
      - "3641"
      - "3642"
      - "3643"
      - "3644"
      - "3645"
      - "3646"
      - "3647"
      - "3648"
      - "3649"
      - "3650"
      - "3651"
      - "3652"
      - "3653"
      - "3654"
      - "3655"
      - "3656"
      - "3657"
      - "3658"
      - "3659"
      - "3660"
      - "3661"
      - "3662"
      - "3663"
      - "3664"
      - "3665"
      - "3666"
      - "3667"
      - "3668"
      - "3675"
      - "3677"
      - "3760"
      - "3761"
      - "3762"
      - "3763"
      - "3764"
      - "3765"
      - "3766"
      - "3767"
      - "3768"
      - "3769"
      - "3770"
      - "3771"
      - "3772"
      - "3773"
      - "3774"
      - "3775"
      - "3776"
      - "3777"
      - "3778"
      - "3779"
      - "3780"
      - "3781"
      - "3782"
      - "3783"
      - "3784"
      - "3785"
      - "3786"
      - "3787"
      - "3788"
      - "3789"
      - "3790"
      - "3791"
      - "3939"
      - "3940"
      - "3941"
      - "3942"
      - "3943"
      - "3944"
      - "3945"
      - "3946"
      - "3947"
      - "3948"
      - "3949"
      - "3950"
      - "3951"
      - "3952"
      - "3953"
      - "3954"
      - "3955"
      - "3956"
      - "3957"
      - "3958"
      - "3959"
      - "3960"
      - "3961"
      - "3962"
      - "3963"
      - "3964"
      - "3965"
      - "3966"
      - "3967"
      - "3968"
      - "3969"
      - "3970"
      - "3971"
      - "3972"
      - "3973"
      - "3974"
      - "3975"
      - "3976"
      - "3977"
      - "3978"
      - "3979"
      - "3980"
      - "3981"
      - "3982"
      - "3983"
      - "3984"
      - "3985"
      - "3986"
      - "3987"
      - "3988"
      - "3989"
      - "3990"
      - "3991"
      - "3992"
      - "3993"
      - "3994"
      - "3995"
      - "3996"
      - "3997"
      - "3998"
      - "3999"
      - "4000"
      - "4001"
      - "4002"
      - "4003"
      - "4004"
      - "4005"
      - "4006"
      - "4007"
      - "4008"
      - "4009"
      - "4010"
      - "4011"
      - "4012"
      - "4013"
      - "4014"
      - "4015"
      - "4016"
      - "4017"
      - "4018"
      - "4019"
      - "4020"
      - "4021"
      - "4022"
      - "4023"
      - "4201"
      - "4203"
      - "4204"
      - "4205"
      - "4206"
      - "4207"
      - "4208"
      - "4209"
      - "4210"
      - "4211"
      - "4212"
      - "4213"
      - "4214"
      - "4215"
      - "4216"
      - "4217"
      - "4218"
      - "4219"
      - "4220"
      - "4221"
      - "4222"
      - "4223"
      - "4224"
      - "4225"
      - "4226"
      - "4227"
      - "4228"
      - "4229"
      - "4230"
      - "4231"
      - "4232"
      - "4233"
      - "4234"
      - "4235"
      - "4236"
      - "4237"
      - "4238"
      - "4239"
      - "4240"
      - "4241"
      - "4242"
      - "4243"
      - "4244"
      - "4245"
      - "4246"
      - "4247"
      - "4248"
      - "4249"
      - "4250"
      - "4251"
      - "4252"
      - "4253"
      - "4254"
      - "4255"
      - "4256"
      - "4257"
      - "4258"
      - "4259"
      - "4260"
      - "4261"
      - "4262"
      - "4263"
      - "4264"
      - "4265"
      - "4266"
      - "4267"
      - "4268"
      - "4269"
      - "4270"
      - "4271"
      - "4272"
      - "4273"
      - "4274"
      - "4275"
      - "4276"
      - "4277"
      - "4278"
      - "4279"
      - "4280"
      - "4281"
      - "4282"
      - "4283"
      - "4284"
      - "4285"
      - 4289
  Subgraph-24:
    id: "24"
    name: Salesforce A-E
    steps:
      - "4305"
      - "4306"
      - "4307"
      - "4308"
      - "4309"
      - "4310"
      - "4311"
      - "4312"
      - "4313"
      - "4314"
      - "4315"
      - "4316"
      - "4317"
      - "4318"
      - "4319"
      - "4320"
      - "4321"
      - "4322"
      - "4323"
      - "4324"
      - "4325"
      - "4326"
      - "4327"
      - "4328"
      - "4329"
      - "4330"
      - "4331"
      - "4332"
      - "4333"
      - "4334"
      - "4335"
      - "4336"
      - "4337"
      - "4338"
      - "4339"
      - "4340"
      - "4341"
      - "4342"
      - "4343"
      - "4344"
      - "4345"
      - "4346"
      - "4347"
      - "4348"
      - "4349"
      - "4350"
      - "4351"
      - "4352"
      - "4353"
      - "4354"
      - "4355"
      - "4356"
      - "4357"
      - "4358"
      - "4359"
      - "4360"
      - "4361"
      - "4362"
      - "4363"
      - "4364"
      - "4365"
      - "4366"
      - "4367"
      - "4368"
      - "4369"
      - "4370"
      - "4371"
      - "4372"
      - "4373"
      - "4374"
      - "4375"
      - "4376"
      - "4377"
      - "4378"
      - "4379"
      - "4380"
      - "4381"
      - "4382"
      - "4383"
      - "4384"
      - "4385"
      - "4386"
      - "4387"
      - "4388"
      - "4389"
      - "4390"
      - "4391"
      - "4392"
      - "4393"
      - "4394"
      - "4395"
      - "4396"
      - "4397"
      - "4398"
      - "4399"
      - "4400"
      - "4401"
      - "4402"
      - "4403"
      - "4404"
      - "4405"
      - "4406"
      - "4407"
      - "4408"
      - "4409"
      - "4410"
      - "4411"
      - "4412"
      - "4413"
      - "4414"
      - "4415"
      - "4416"
      - "4417"
      - "4418"
      - "4419"
      - "4420"
      - "4421"
      - "4422"
      - "4423"
      - "4424"
      - "4425"
      - "4426"
      - "4427"
      - "4428"
      - "4429"
      - "4430"
      - "4431"
      - "4432"
      - "4433"
      - "4434"
      - "4629"
      - "4630"
      - "4631"
      - "4632"
      - "4633"
      - "4634"
      - "4635"
      - "4636"
      - "4637"
      - "4638"
      - "4639"
      - "4640"
      - "4641"
      - "4642"
      - "4643"
      - "4644"
      - "4645"
      - "4646"
      - "4647"
      - "4648"
      - "4649"
      - "4650"
      - "4651"
      - "4652"
      - "4653"
      - "4654"
      - "4655"
      - "4656"
      - "4657"
      - "4658"
      - "4659"
      - "4660"
      - "4661"
      - "4662"
      - "4663"
      - "4664"
      - "4665"
      - "4666"
      - "4667"
      - "4668"
      - "4669"
      - "4670"
      - "4671"
      - "4672"
      - "4673"
      - "4674"
      - "4675"
      - "4676"
      - "4677"
      - "4678"
      - "4679"
      - "4680"
      - "4681"
      - "4682"
      - "4683"
      - "4684"
      - "4685"
      - "4686"
      - "4687"
      - "4688"
      - "4689"
      - "4690"
      - "4691"
      - "4692"
      - "4693"
      - "4694"
      - "4695"
      - "4696"
      - "4697"
      - "4698"
      - "4699"
      - "4700"
      - "4701"
      - "4702"
      - "4703"
      - "4704"
      - "4705"
      - "4706"
      - "4707"
      - "4708"
      - "4709"
      - "4710"
      - "4711"
      - "4712"
      - "4713"
      - "4714"
      - "4715"
      - "4716"
      - "4717"
      - "4718"
      - "4719"
      - "4720"
      - "4721"
      - "4722"
      - "4723"
      - "4724"
      - "4725"
      - "4726"
      - "4727"
      - "4728"
      - "4729"
      - "4730"
      - "4731"
      - "4732"
      - "4733"
      - "4734"
      - "4735"
      - "4736"
      - "4737"
      - "4738"
      - "4739"
      - "4740"
      - "4741"
      - "4742"
      - "4743"
      - "4744"
      - "4745"
      - "4746"
      - "4747"
      - "4748"
      - "4749"
      - "4750"
      - "4751"
      - "4752"
      - "4753"
      - "4754"
      - "4755"
      - "4756"
      - "4757"
      - "4758"
  Subgraph-27:
    id: "27"
    name: Salesforce F-J
    steps:
      - "4435"
      - "4436"
      - "4437"
      - "4438"
      - "4439"
      - "4440"
      - "4441"
      - "4442"
      - "4443"
      - "4444"
      - "4445"
      - "4446"
      - "4447"
      - "4448"
      - "4449"
      - "4450"
      - "4451"
      - "4452"
      - "4453"
      - "4454"
      - "4455"
      - "4456"
      - "4457"
      - "4458"
      - "4459"
      - "4460"
      - "4461"
      - "4462"
      - "4463"
      - "4464"
      - "4465"
      - "4760"
      - "4761"
      - "4762"
      - "4763"
      - "4764"
      - "4765"
      - "4766"
      - "4767"
      - "4768"
      - "4769"
      - "4770"
      - "4771"
      - "4772"
      - "4773"
      - "4774"
      - "4775"
      - "4776"
      - "4777"
      - "4778"
      - "4779"
      - "4780"
      - "4781"
      - "4782"
      - "4783"
      - "4784"
      - "4785"
      - "4786"
      - "4787"
      - "4788"
      - "4789"
      - "4790"
  Subgraph-28:
    id: "28"
    name: Salesforce K-O
    steps:
      - "4466"
      - "4467"
      - "4468"
      - "4469"
      - "4470"
      - "4471"
      - "4472"
      - "4473"
      - "4474"
      - "4475"
      - "4476"
      - "4477"
      - "4478"
      - "4479"
      - "4480"
      - "4481"
      - "4482"
      - "4483"
      - "4484"
      - "4485"
      - "4486"
      - "4487"
      - "4488"
      - "4489"
      - "4490"
      - "4491"
      - "4492"
      - "4493"
      - "4494"
      - "4495"
      - "4496"
      - "4497"
      - "4498"
      - "4499"
      - "4500"
      - "4501"
      - "4502"
      - "4503"
      - "4504"
      - "4505"
      - "4506"
      - "4507"
      - "4508"
      - "4509"
      - "4510"
      - "4511"
      - "4512"
      - "4513"
      - "4514"
      - "4515"
      - "4516"
      - "4517"
      - "4518"
      - "4519"
      - "4520"
      - "4521"
      - "4522"
      - "4523"
      - "4524"
      - "4525"
      - "4526"
      - "4791"
      - "4792"
      - "4793"
      - "4794"
      - "4795"
      - "4796"
      - "4797"
      - "4798"
      - "4799"
      - "4800"
      - "4801"
      - "4802"
      - "4803"
      - "4804"
      - "4805"
      - "4806"
      - "4807"
      - "4808"
      - "4809"
      - "4810"
      - "4811"
      - "4812"
      - "4813"
      - "4814"
      - "4815"
      - "4816"
      - "4817"
      - "4818"
      - "4819"
      - "4820"
      - "4821"
      - "4822"
      - "4823"
      - "4824"
      - "4825"
      - "4826"
      - "4827"
      - "4828"
      - "4829"
      - "4830"
      - "4831"
      - "4832"
      - "4833"
      - "4834"
      - "4835"
      - "4836"
      - "4837"
      - "4838"
      - "4839"
      - "4840"
      - "4841"
      - "4842"
      - "4843"
      - "4844"
      - "4845"
      - "4846"
      - "4847"
      - "4848"
      - "4849"
      - "4850"
      - "4851"
  Subgraph-29:
    id: "29"
    name: Salesforce P-T
    steps:
      - "4527"
      - "4528"
      - "4529"
      - "4530"
      - "4531"
      - "4532"
      - "4533"
      - "4534"
      - "4535"
      - "4536"
      - "4537"
      - "4538"
      - "4539"
      - "4540"
      - "4541"
      - "4542"
      - "4543"
      - "4544"
      - "4545"
      - "4546"
      - "4547"
      - "4548"
      - "4549"
      - "4550"
      - "4551"
      - "4552"
      - "4553"
      - "4554"
      - "4555"
      - "4556"
      - "4557"
      - "4558"
      - "4559"
      - "4560"
      - "4561"
      - "4562"
      - "4563"
      - "4564"
      - "4565"
      - "4566"
      - "4567"
      - "4568"
      - "4569"
      - "4570"
      - "4571"
      - "4572"
      - "4573"
      - "4574"
      - "4575"
      - "4576"
      - "4577"
      - "4578"
      - "4579"
      - "4580"
      - "4581"
      - "4582"
      - "4583"
      - "4584"
      - "4585"
      - "4586"
      - "4587"
      - "4588"
      - "4589"
      - "4590"
      - "4591"
      - "4592"
      - "4593"
      - "4594"
      - "4595"
      - "4596"
      - "4597"
      - "4598"
      - "4599"
      - "4600"
      - "4601"
      - "4602"
      - "4603"
      - "4604"
      - "4605"
      - "4606"
      - "4607"
      - "4608"
      - "4609"
      - "4610"
      - "4611"
      - "4852"
      - "4853"
      - "4854"
      - "4855"
      - "4856"
      - "4857"
      - "4858"
      - "4859"
      - "4860"
      - "4861"
      - "4862"
      - "4863"
      - "4864"
      - "4865"
      - "4866"
      - "4867"
      - "4868"
      - "4869"
      - "4870"
      - "4871"
      - "4872"
      - "4873"
      - "4874"
      - "4875"
      - "4876"
      - "4877"
      - "4878"
      - "4879"
      - "4880"
      - "4881"
      - "4882"
      - "4883"
      - "4884"
      - "4885"
      - "4886"
      - "4887"
      - "4888"
      - "4889"
      - "4890"
      - "4891"
      - "4892"
      - "4893"
      - "4894"
      - "4895"
      - "4896"
      - "4897"
      - "4898"
      - "4899"
      - "4900"
      - "4901"
      - "4902"
      - "4903"
      - "4904"
      - "4905"
      - "4906"
      - "4907"
      - "4908"
      - "4909"
      - "4910"
      - "4911"
      - "4912"
      - "4913"
      - "4914"
      - "4915"
      - "4916"
      - "4917"
      - "4918"
      - "4919"
      - "4920"
      - "4921"
      - "4922"
      - "4923"
      - "4924"
      - "4925"
      - "4926"
      - "4927"
      - "4928"
      - "4929"
      - "4930"
      - "4931"
      - "4932"
      - "4933"
      - "4934"
      - "4935"
      - "4936"
  Subgraph-30:
    id: "30"
    name: Salesforce U-Z
    steps:
      - "4612"
      - "4613"
      - "4614"
      - "4615"
      - "4616"
      - "4617"
      - "4618"
      - "4619"
      - "4620"
      - "4621"
      - "4622"
      - "4623"
      - "4624"
      - "4625"
      - "4626"
      - "4627"
      - "4937"
      - "4938"
      - "4939"
      - "4940"
      - "4941"
      - "4942"
      - "4943"
      - "4944"
      - "4945"
      - "4946"
      - "4947"
      - "4948"
      - "4949"
      - "4950"
      - "4951"
      - "4952"
  Subgraph-33:
    id: "33"
    name: PAYCOM
    steps:
      - "4989"
      - "4990"
  Subgraph-34:
    id: "34"
    name: eCommerce Sales and Orders
    steps:
      - "5011"
      - "5012"
      - "5013"
      - "5014"
      - "5015"
      - "5016"
      - "5023"
      - "5024"
      - "5025"
      - "5026"
      - "5027"
      - "5028"
      - "5029"
      - "5030"
      - "5031"
      - "5032"
      - "5033"
      - "5034"
      - "5035"
      - "5036"
      - "5037"
      - "5038"
      - "5039"
      - "5040"
      - "5041"
      - "5042"
      - "5043"
      - "5044"
      - "5045"
      - "5046"
      - "5047"
      - "5048"
      - "5025"
      - "5026"
      - "5027"
      - "5029"
      - "5030"
      - "5032"
      - "5033"
      - "5034"
      - "5035"
      - "5036"
      - "5037"
      - "5038"
      - "5039"
      - "5041"
      - "5042"
      - "5043"
      - "5045"
      - "5046"
      - "5047"
      - "5048"
      - "5049"
      - "5050"
      - "5051"
      - "5053"
      - "5054"
      - "5055"
      - "5056"
      - "5057"
      - "5058"
      - "5060"
      - "5061"
      - "5063"
      - "5064"
      - "5065"
      - "5065"
      - "5067"
      - "5067"
      - "5068"
      - "5069"
      - "5070"
      - "5071"
      - "5072"
      - "5069"
      - "5073"
      - "5074"
      - "5075"
      - "5076"
      - "5077"
      - "5078"
      - "5080"
      - "5082"
      - "5083"
      - "5084"
      - "5086"
      - "5087"
      - "5089"
      - "5090"
      - "5091"
      - "5094"
      - "5095"
      - "5443"
      - "5447"
      - "5473"
      - "5567"
      - "5556"
      - "5584"
      - "5585"
      - "5586"
      - "5587"
      - "1478"
      - "2470"
      - "3204"
      - "3308"
      - "5032"
      - "5067"
      - "5568"
      - "5569"
      - "5570"
      - "5571"
      - "5572"
      - "5579"
      - "5592"
      - "5593"
      - "5560"
      - "5632"
      - "5637"
      - "5660"
      - "5069"
      - "5661"
      - "5094"
      - "5665"
      - "5666"
      - "5672"
      - "5673"
      - "5674"
      - "5675"
      - 5e2b17c0-3ea5-47f6-88f7-f7fda290f385
      - 50b33810-8689-4ef0-bf18-b6c827ff4afb
      - a662a4da-db28-4b8b-aef8-4b7b6f48f417
  Subgraph-38:
    id: "38"
    name: ADDRESS
    steps:
      - "3659"
      - "3012"
      - "1478"
      - "3204"
      - "4031"
      - "4305"
      - "4758"
      - "2470"
      - "3308"
      - "5026"
      - "5027"
      - "5049"
      - "5050"
      - "5077"
      - "5043"
      - "5061"
      - "5065"
      - "5071"
      - "5072"
      - "2718"
      - "3563"
      - "5096"
      - "5097"
      - 04de639f-996e-4d21-9f4e-8cfe9811d678
  Subgraph-41:
    id: "41"
    name: ORACLE
    steps:
      - "5254"
      - "5255"
      - "5256"
      - "5257"
      - "5258"
      - "5259"
      - "5260"
      - "5261"
      - "5262"
      - "5263"
      - "5264"
      - "5265"
      - "5266"
      - "5267"
      - "5268"
      - "5269"
      - "5270"
      - "5271"
      - "5272"
      - "5273"
      - "5274"
      - "5275"
      - "5276"
      - "5277"
      - "5278"
      - "5279"
      - "5280"
      - "5281"
      - "5282"
      - "5283"
      - "5284"
      - "5285"
      - "5286"
      - "5287"
      - "5288"
      - "5289"
      - "5290"
      - "5291"
      - "5292"
      - "5293"
      - "5294"
      - "5295"
      - "5296"
      - "5297"
      - "5298"
      - "5299"
      - "5300"
      - "5301"
      - "5302"
      - "5303"
      - "5304"
      - "5305"
      - "5306"
      - "5307"
      - "5308"
      - "5309"
      - "5310"
      - "5311"
      - "5312"
      - "5313"
      - "5314"
      - "5315"
      - "5316"
      - "5317"
      - "5318"
      - "5319"
      - "5320"
      - "5321"
      - "5322"
      - "5323"
      - "5324"
      - "5325"
      - "5326"
      - "5327"
      - "5328"
      - "5329"
      - "5330"
      - "5331"
      - "5332"
      - "5333"
      - "5334"
      - "5335"
      - "5336"
      - "5337"
      - "5338"
      - "5339"
      - "5340"
      - "5341"
      - "5342"
      - "5343"
      - "5344"
      - "5345"
      - "5346"
      - "5347"
      - "5348"
      - "5349"
      - "5350"
      - "5351"
      - "5352"
      - "5353"
      - "5354"
      - "5355"
      - "5356"
      - "5357"
      - "5358"
      - "5359"
      - "5360"
      - "5361"
      - "5362"
      - "5363"
      - "5364"
      - "5365"
      - "5366"
      - "5367"
      - "5368"
      - "5369"
      - "5370"
      - "5371"
      - "5372"
      - "5373"
      - "5374"
      - "5375"
      - "5376"
      - "5377"
      - "5378"
      - "5379"
      - "5380"
      - "5381"
      - "5382"
      - "5383"
      - "5384"
      - "5385"
      - "5386"
      - "5387"
      - "5388"
      - "5389"
      - "5390"
      - "5391"
      - "5392"
      - "5393"
      - "5394"
      - "5395"
      - "5396"
      - "5398"
      - "5399"
      - "5400"
      - "5401"
      - "5402"
      - "5403"
      - "5404"
      - "5405"
      - "5406"
      - "5408"
      - "5409"
      - "5410"
      - "5411"
      - "5412"
      - "5413"
      - "5414"
      - "5416"
      - "5418"
      - "5422"
      - "5425"
      - "5426"
      - "5427"
      - "5428"
      - "5429"
      - "5430"
      - "5431"
      - "5432"
      - "5433"
      - "5434"
      - "5435"
      - "5436"
      - "5106"
      - "5107"
      - "5108"
      - "1595"
      - "5109"
      - "5397"
      - "5423"
      - "5424"
      - "5448"
      - "5449"
      - "5450"
      - "5451"
      - "5452"
      - "5453"
      - "5454"
      - "5455"
      - "5456"
      - "5457"
      - "5458"
      - "5459"
      - "5460"
      - "5461"
      - "5462"
      - "5463"
      - "5464"
      - "5469"
      - "5470"
      - "5471"
      - "5472"
      - "5474"
      - "5475"
      - "5476"
      - "5477"
      - "5478"
      - "5479"
      - "5480"
      - "5481"
      - "5482"
      - "5483"
      - "5484"
      - "5486"
      - "5487"
      - "5488"
      - "5489"
      - "5490"
      - "5491"
      - "5492"
      - "5493"
      - "5494"
      - "5495"
      - "5496"
      - "5497"
      - "5498"
      - "5499"
      - "5500"
      - "5501"
      - "5502"
      - "5503"
      - "5504"
      - "5506"
      - "5507"
      - "5509"
      - "5510"
      - "5511"
      - "5512"
      - "5513"
      - "5514"
      - "5515"
      - "5516"
      - "5517"
      - "5518"
      - "5519"
      - "5520"
      - "5521"
      - "5522"
      - "5523"
      - "5524"
      - "5525"
      - "5527"
      - "5528"
      - "5529"
      - "5530"
      - "5532"
      - "5533"
      - "5534"
      - "5535"
      - "5536"
      - "5537"
      - "5538"
      - "5539"
      - "5540"
      - "5541"
      - "5542"
      - "5545"
      - "5546"
      - "5547"
      - "5548"
      - "5549"
      - "5552"
      - "5608"
      - "5630"
      - "5631"
      - "5639"
      - "5640"
      - "5641"
      - "5645"
      - "5650"
      - "5651"
      - "5654"
      - "5655"
      - d2fa9e2d-2d2e-4124-8905-953fa7374383
      - 3e74f055-8b7d-4e2d-bab4-b98b7e275c27
      - 3e9873e1-9d40-4913-96ab-ba2090bafc8b
      - 593872ef-4b51-46fe-bff5-78fe16654f91
      - a3e8cf8e-c979-4436-8e85-d6b7118cdd09
      - dcdd8d4b-a68e-4884-b125-93211dee2df8
      - d9aae5d0-d9c4-43da-a4dc-af52071acfbe
      - d9aae5d0-d9c4-43da-a4dc-af52071acfbe
      - bab3db78-569b-430c-9c51-5396f30491c9
      - cd525865-ec79-44a3-99cb-88ed75956d89
      - 73c56ccf-7d05-444b-830f-7c715cda15f6
      - 5390e3e8-0ccf-470b-b9a4-511474fa69a8
      - 92a9c462-f902-4af5-9903-2f0206ef11e4
      - 3394d521-66dd-4f65-bb1f-3474d7610faf
      - 6b348b69-2731-4b50-ba81-a83bf5081a7f
      - 70b58f34-459b-44c5-ac64-e6357d37fa73
      - 0367737a-3fb5-4ab7-ab77-2fb7528227b7
      - 9a0722e7-7cb5-4b4c-b110-46973c4b0ae4
      - 147a875a-e7f5-4b50-af21-fe6a7d71ea78
      - 6de153fe-e7c2-4823-91ce-74d478fca40d
      - 1bcc41a2-c780-4ef9-8a36-4c198a2cc083
      - bba5a716-aa0d-4490-bfc7-03678bdaf548
      - 332d026d-467e-42b5-a65f-8263d531c5cd
      - 364fd2b9-ebc6-4454-8b67-2e40b615abfe
      - 525727f0-dd30-4435-8f11-c9d1412fa0d5
  Subgraph-42:
    id: "42"
    name: DIM_PRODUCT
    steps:
      - "5034"
      - "5035"
      - "5054"
      - "5055"
      - "5076"
      - "5560"
      - 50b33810-8689-4ef0-bf18-b6c827ff4afb
  Subgraph-43:
    id: "43"
    name: DIM_WEBSITE
    steps:
      - "1478"
      - "3204"
      - "4031"
      - "5032"
      - "5067"
      - "5568"
      - "5569"
      - "5570"
      - "5571"
      - "5572"
      - "5579"
      - "5556"
      - "5584"
      - "5585"
      - "5586"
      - "5587"
  Subgraph-48:
    id: "48"
    name: CLIENT_MDM_HISTORY
    steps:
      - "4305"
      - "1478"
      - "2470"
      - "1500"
      - "3308"
      - "1595"
      - "4758"
      - "3204"
      - "5579"
      - 5610
      - "5610"
      - "5109"
      - "5397"
      - "5595"
      - "5399"
      - "5283"
      - "5612"
      - 5620
      - 5621
      - "5627"
      - "5628"
      - "5629"
      - "5626"
      - "5633"
      - 5634
      - "5634"
      - "5636"
      - "5624"
      - "5646"
      - "5638"
      - "5647"
      - "5648"
      - "5649"
      - 5667
  Subgraph-52:
    id: "52"
    name: CLIENT_DIMS
    steps:
      - "5649"
      - "5612"
      - "3308"
      - 5652
      - 5653
      - "5080"
      - "5656"
      - "5080"
      - "5657"
      - "5595"
      - "5658"
      - "5624"
      - "5669"
      - "5676"
      - "5677"
  Subgraph-53:
    id: "53"
    name: Shipping Fee
    steps:
      - "5552"
      - "5608"
      - "5630"
      - "5631"
      - "5639"
      - "5640"
      - "5641"
      - "5645"
      - "5650"
      - "5651"
      - "5654"
      - "5655"
  Subgraph-54:
    id: "54"
    name: CLIENT_MDM_FULL
    steps:
      - "3308"
      - "5080"
      - "5595"
      - "5612"
      - "5624"
      - "5649"
      - "5652"
      - "5653"
      - "5657"
      - "5658"
      - "5662"
      - "5664"
      - "5668"
      - "5669"
      - "5676"
      - "1478"
      - "1500"
      - "1595"
      - "2470"
      - "3204"
      - "3308"
      - "4305"
      - "4758"
      - "5109"
      - "5283"
      - "5397"
      - "5399"
      - "5579"
      - "5595"
      - "5610"
      - "5612"
      - "5624"
      - "5626"
      - "5627"
      - "5628"
      - "3308"
      - "5080"
      - "5595"
      - "5612"
      - "5624"
      - "5649"
      - "5652"
      - "5653"
      - "5657"
      - "5658"
      - "5669"
      - "5676"
      - "5677"
      - "1478"
      - "1500"
      - "1595"
      - "2470"
      - "3204"
      - "3308"
      - "4305"
      - "4758"
      - "5109"
      - "5283"
      - "5397"
      - "5399"
      - "5579"
      - "5595"
      - "5610"
      - "5612"
      - "5624"
      - "5626"
      - "5627"
      - "5628"
      - "5629"
      - "5633"
      - "5634"
      - "5636"
      - "5638"
      - "5646"
      - "5647"
      - "5648"
      - "5649"
  Subgraph-56:
    id: "56"
    name: SHIP_FEE_VIEW
    steps:
      - "5679"
      - 431b0b7e-6436-4469-819d-ccd931647930
  Subgraph-6:
    id: "6"
    name: eCommerce Billing
    steps:
      - "1478"
      - "1485"
      - "1487"
      - "3211"
      - "3933"
      - "4032"
      - "4759"
      - "3308"
      - "2470"
      - "5576"
      - "5577"
      - "5578"
      - "5579"
      - "2470"
      - "3308"
      - "5032"
      - "5067"
      - "5568"
      - "5569"
      - "5570"
      - "5571"
      - "5572"
      - "5592"
      - "5593"
      - "3213"
      - "3204"
      - "5593"
      - "5637"
      - "5032"
      - "5067"
      - "5568"
      - "5569"
      - "5571"
      - "5572"
      - "5632"
      - "5660"
      - "5032"
      - "5053"
      - "5067"
      - "5068"
      - "5080"
      - "5082"
      - "5665"
      - "5666"
      - "5672"
  Subgraph-60:
    id: "60"
    name: Intercom Tables
    steps:
      - "5703"
      - "5704"
      - "5705"
      - "5706"
      - "5707"
      - "5708"
      - "5709"
      - "5710"
      - "5711"
      - "5712"
      - "5713"
      - "5714"
      - "5715"
      - "5716"
      - "5717"
      - "5718"
      - "5719"
      - "5720"
      - "5721"
      - "5722"
      - "5723"
      - "5724"
      - 98618de8-8c7c-41dc-8229-ac5ac0b48354
      - e837fbc1-2e71-470c-83ee-b6dbc30b1c34
      - a0695320-c0f6-426f-98bc-1cc3253a40fe
      - df1f89ef-aff9-4b18-bb69-a94ddddb349b
      - dff48224-296d-4456-8f49-14b067a0d132
      - ce779f37-6ca0-4aee-b325-056edfa34761
  Subgraph-62:
    id: "62"
    name: Oracle WMS Tables
    steps:
      - c100132b-b2fa-48c5-b1d1-4772c04a5565
      - 4b1e7bbf-0cb5-44cb-b624-7b81e719b7a3
      - 96f6a33d-9f9d-480b-a1b3-6a9ef6714ad9
      - 42d04f3e-c172-4576-91b6-3ad92173c581
      - cb172f3e-836b-412d-8144-8e7857073c94
      - f260e8aa-c7b0-44ce-a648-5e80c11af181
      - 922e4f54-94d0-4a1d-b5ed-476b006855b4
      - b1823847-0666-45e7-8f22-ce205f1f4893
      - 3782ae56-a80d-457b-a1db-5187d8c92a8b
      - 100bbee3-1ded-4022-8a0f-1fbe0a9e0c87
      - a373c37e-0888-4c28-b2b6-49fbe4cf2f5e
      - d48b2711-4455-4173-a04c-b31fb54bc605
      - 13f1574c-7953-40bc-9605-a633aad1c70f
      - ca2afd09-00b8-470b-abd8-310adbc61a5c
      - 73edd73b-5050-46e5-bd73-b3f01e542d53
      - 9bbe656b-9e96-4952-9d20-80e4887c4fcb
      - 95c49906-8b10-4b56-b455-a42ef28f0683
      - a2af9718-afed-4c0c-ad67-502d80b7ff63
      - 84d76c59-646e-44dc-8a16-08337b1ba948
      - 52c1cf1f-445d-403c-921e-0144cee79c45
      - a51ba1ae-07bb-4642-bad3-bec6153b0fda
      - edfd4c11-87b9-40b3-9cc5-3fddbd17aec1
      - 81f90362-776c-463b-9d17-28ac606f2d9b
      - a3867fe0-182c-46e1-97a8-4407f8bda345
      - 47df8ed4-81ee-4f46-b009-74f160fdaed8
      - ee7ae9aa-9494-4693-b4b8-5ed50b3aa325
      - 9d12eef2-10f0-4d3e-965d-aef96dea24bc
      - c8cb1953-5870-4d32-8609-31ef8dd3f34c
      - 041ed7ad-c31c-4097-a6b6-f65b8fef8dc1
      - 047aec0f-d341-4b49-bf6c-f73cd992ce29
      - 05cde6cb-ffcd-4e83-8c2f-5e52c02b1c34
      - 0839c9e4-7be0-4751-914a-6c0d4e2c762a
      - 0afceead-97d5-46d8-bcc4-729ba415102b
      - 0b5f064c-39c1-4081-ad51-e15427c28a77
      - 0b7803ae-d92d-4c1d-b59f-02955e0907e5
      - 0e1693b2-6f08-456e-8eec-c7cbfe736779
      - 111d53af-a768-4392-9d3f-b87b4b5cae84
      - 128cadc9-be64-48da-a7a1-e5118ff216ff
      - 1317143d-15f7-4a70-90bb-1fea0664de6e
      - 1366e523-5c3e-40a4-9aea-006e0ef6dbac
      - 149ade9d-0a7b-4754-affa-9bf75e304319
      - 174602ee-2fb8-489f-9e9e-b6b88d252d8f
      - 17a7e78c-1e55-454a-b28f-8ccbb527e929
      - 17c24f44-e7dd-45ca-8311-4f2daee43f55
      - 183f4533-ffef-47ff-a8c0-534a83bd7c16
      - 18b270df-0a39-4118-acf7-0371b94055cf
      - 1956b048-88b6-484e-a237-c5512b6944cd
      - 19e691fc-401e-4245-8eef-72db5a1a3172
      - 1ba139a5-4d53-440b-94ab-de483763e1bb
      - 1c1c9d5c-b946-4d6a-92d2-8c0c4ae0e443
      - 1dfacf13-3fbc-4de2-ba0f-3eda223db57c
      - 1fc21c1d-968a-492e-9a93-08e618f9c8f5
      - 243e8f0b-2777-4193-a31d-c91e5a19a18b
      - 26b52f81-034a-4db6-9407-1273722c8e57
      - 2781aef5-ee7d-46bb-b9c3-7d657a18f36d
      - 2a6c6a31-c9a0-4cdf-abe4-74323e06b40a
      - 2c36cbe7-72c2-4707-a1b1-25c48fb75957
      - 2dedc0c3-7f6f-4c80-83b1-87f26f5ddef9
      - 31b8d9bb-8929-444a-8197-43bacbd4dfa1
      - 396d0940-6693-4c19-90b4-1883d01e7916
      - 3a116ed0-85d0-4d48-aaf7-79401ebc7a0e
      - 3b1aff38-c276-4980-b63f-3e22dd3cd979
      - 3d7ea14d-bd8e-49a0-87d0-5174b87b9daa
      - 3e625be8-8ce4-41d6-9625-fe117993279d
      - 44523da8-919f-4d23-8df5-7e828fd2811d
      - 495d6e48-dcce-46cb-871f-3d2494c7a384
      - 4d33279b-aa66-491c-b534-13cad12d0ef9
      - 50673b04-8930-4cfc-82ee-08d54499fd43
      - 5b7e5e5c-44c0-4ec6-ae24-b3ba51c99e83
      - 5d828456-2b94-4341-8259-830bd87faf40
      - 5e33b56c-078f-4515-a5c2-b99ff22beabe
      - 5e696b2e-3efa-4a7f-b5e1-e794f691eb53
      - 65116ec0-aa15-4a85-9650-596038f61fb1
      - 662b7dad-7907-45f1-9b62-32028e19c63d
      - 6bcbdcf2-c770-453b-826e-1b080e1a7feb
      - 6f6fd21d-3999-42f7-89df-9373da98877f
      - 6faf2e70-98ad-4e55-9b7b-797bfdcafa17
      - 72380764-0c07-466a-9b16-3e30b4f58b8d
      - 73aa726c-4c84-4be7-8302-94da29b32497
      - 78d538da-a663-442e-97d4-3dc91a07ebb2
      - 79648c1d-6915-41b9-94e7-94e1bc1e25e8
      - 7d86f448-9fd1-4c2f-a5ac-89437c9d15a7
      - 7edb5532-5d52-48ee-8511-e36663a7c6af
      - 8009bd5b-83ae-44f3-a390-e65da66093d2
      - 83803c89-0741-487d-b2ea-16fca29ef4b2
      - 853f7e2b-021c-49de-80dd-39e4cb3b783c
      - 878e0c64-9d38-45c1-a592-5c406e0974c4
      - 889b1deb-6a28-4127-9d23-47cb158dc207
      - 8bcb0eb0-467f-4f80-9fcf-800762fd8dbf
      - 920fba47-9e49-49d6-9243-5dc51abdf835
      - 95f90e8e-767e-4e22-a553-941e28986b0b
      - 98799435-2896-417b-a1e4-80970ba5f11e
      - 9be55db6-d90a-4ac4-b765-77932e596545
      - a158d599-899c-4a8f-b37d-a65355fb762f
      - a82cd650-965b-4547-b7fc-a636ffdf2f6c
      - afa13b6f-b111-4674-a9a1-72de73ed3c83
      - b747bca0-a8ff-4ba2-967f-f8216a48b7c4
      - b906149f-6c35-4f8a-bf93-4d45808f3738
      - bec5e14e-0cb3-4b84-b439-5ae455d0b11b
      - bff04d7b-c625-445f-a77c-9be36e1a9325
      - c016c75d-78e2-4ad9-b787-49d2b170c615
      - c18965d9-90c4-4023-988f-4a8933df87c9
      - c5c7c66c-f94a-42da-9464-591ecce81756
      - cf5ddca3-c7bc-422d-9203-4dbd9ec88fd8
      - d06b9ab9-89d9-4425-8cec-101069c2c2ff
      - d135d420-01b1-4816-83c1-9cdf47da3eb4
      - d508fe48-8785-4ddf-b637-5fe475850374
      - d58d2994-785a-49b1-b516-38ce741cb543
      - e40aa420-adbd-48e2-9bc5-5a0da9ddee86
      - e42f4b0b-4a96-4893-9353-ec8e2e4d2a4e
      - e7ab3fff-6db3-4d42-9428-2c2a03e552da
      - e9ca859c-838d-41fd-88fd-f1f260511d17
      - eadd4c12-a378-4752-866f-c9ab9ee872e0
      - ec4c7078-3d77-4f82-aac8-e9657e33c1c0
      - efa711da-2019-48fc-979c-15159d1ea8d5
      - efe4d9c7-7b14-47fb-bd03-40d12c0fc1c4
      - f0a1c714-792b-4c05-9922-b413cea8bf80
      - f0c9ebda-623d-4a50-bfba-e54225a4ebd1
      - f5f881b6-482f-4212-9a99-1957d0394fcb
      - f851d7de-63a9-4d95-92b6-599a2f277f06
      - f8f0221e-018d-4f7d-b004-28f524371109
      - ff58210a-fd75-419f-9353-463dd0d55c5c
      - fffb9246-9cdf-417b-9618-7cce288f463e
      - ffcccf0c-f7c7-4387-8f86-42bb026e62ef
      - 0034966a-9369-469a-aed4-2e94f8e74d74
      - 01a75307-24b7-45da-aebc-5cedd92cf1a9
      - 01fd3b94-db51-42af-a1b1-7b7f453a0159
      - 07a86fc2-b277-4cd7-9362-48da9d8af6da
      - 0924fffe-36ed-429d-8c63-1494f524083d
      - 0a730a93-1ed0-406e-9f8e-3c5e61039a64
      - 0b7783f3-b0f3-4437-a1f5-c944fdeae7b4
      - 0f0d5ccb-b823-4d0a-b74e-51efeb1031fe
      - 10bc5b12-bd4d-41dd-9328-e9ea028a221a
      - 16767594-4790-4bdc-a9a7-8d71f1473c13
      - 183fb6d3-736c-4303-b569-b679e94b42e9
      - 18b4702a-9e8b-43d3-999f-61667ee477b1
      - 1bdbbbf0-925f-4805-9e94-083d35e787bf
      - 1dc31811-fea8-4b87-9eaa-4b754ff8ebb6
      - 270b2872-8b9b-41a3-8485-a658e225ec22
      - 2a9e06f3-89d0-4c4a-beee-4359f202a72e
      - 3234f762-0622-4635-a4f5-6e96ef0786c2
      - 3240cba3-96d2-4b61-9ebd-aa964bb2abd6
      - 4b54823b-faa3-43d7-9994-52e513d36735
      - 4dfa3276-5b78-49f1-bf9e-7322e1e8de05
      - 4e3668b3-df15-4055-a18d-1e8e83cc03ad
      - 4e6bf287-a65f-4286-a66b-21570e668dab
      - 4f90cfe7-d360-4555-b75d-ae0234d46c0a
      - 5024f6f9-7d1b-4657-805a-9ef518735531
      - 52f9ca65-f3c9-4116-aff1-98f4e8e02865
      - 530e8637-6455-4e66-b39c-0a832e1d7375
      - 55a281b7-e875-4cc7-9349-f30e62edb680
      - 5aec90cd-e17a-470c-a443-b72815b45b6b
      - 5f363d6d-ba52-44fc-a3af-eb2ae89b2753
      - 66746b8a-ff3d-456f-b5c0-5710da0ccd10
      - 6a24dcc2-1dca-4619-9aca-4b46c2130d1e
      - 6b3fd85b-4b1e-4abb-8c7a-ad4e66a66963
      - 7420e6c7-20f2-4928-be37-928a48d29b8d
      - 7559ae23-588a-4ce3-bb71-8d72442b628d
      - 7819166a-7ce8-4ec2-bb18-6172de1656d8
      - 79d23671-f0f8-4508-a417-b2412bd9d476
      - 7c87552f-6613-4de9-8d1d-7f2814d3491f
      - 7e2d89cd-d651-4f85-b213-ed439759dbd9
      - 7ea7438b-0507-4511-a68f-567ed223e5bd
      - 805597e2-62a0-47dd-808a-38c3aad2b88d
      - 8135f13f-8ded-4b95-88db-f343a41e8487
      - 88599b6c-c694-48da-a411-7ca02ded0076
      - 88e1be5b-3106-4394-b7aa-603288b2fcf3
      - 8986c09b-66e4-406d-b959-edcdebb25087
      - 8b3cb618-3e6a-4bec-bd59-731d7fcdc91f
      - 8b46f942-85ea-4519-9605-39390e326cc3
      - 8ecffc04-edc3-40f9-9f85-9f6c204c7e50
      - 8f0c8d8b-48ad-46f6-a8ac-c6d3fe8be741
      - 8f9c1ed5-e969-4d59-b093-5807f6c30c39
      - 904a2c01-b63a-45b5-8c02-d929181f2435
      - 945a44d4-f790-41c5-b239-e81d7f0da300
      - 978c9f78-ee0e-404c-978e-e0055ffb213c
      - 984c3c51-21ac-4727-b687-705faac54482
      - 9e28e2ac-09f3-4174-9750-5c7134d4c968
      - 9e69b384-b493-4d9d-9aba-156f75b257df
      - a378bf65-310b-477d-8991-da2810da59da
      - a6990987-d8dd-4250-82ce-131dcf3186d5
      - a6cf7e06-f2e1-4394-b948-b9f3046179a5
      - a78fc558-6dd4-4165-b59a-a9879a52fd11
      - a8363d3b-10c4-41cc-8a39-71d41df7764b
      - ad8a999e-f658-4608-bf88-299d51421bc0
      - ae70b5f6-33ee-4002-8dc9-c9dc1e0af98a
      - aecbc0e1-a1ac-4310-8a27-872f1b23674f
      - b0919eca-23bc-4b9f-93f1-1b09825fe269
      - b2b5b376-0649-4c7b-9ab7-1592f205f2dc
      - b39046ed-16a8-4d64-8848-981453c8aecd
      - b3a42583-69cb-48b5-808c-ded0769c246f
      - b4e1256e-8aee-4587-9c17-a6f3d10be278
      - b7190564-7a2a-48fb-b892-041e38e231c1
      - b7809e43-b6eb-4de9-82bd-5c64061b9596
      - bbea4853-64f9-4fbc-bc99-941da8090378
      - be2a42cb-3cee-4c58-8f3b-000c01e75e69
      - bf091c1b-6eb8-4d84-8e5c-8d90ce1dd2aa
      - c1a43087-3dff-47d1-a3aa-f2116da2a829
      - c1c37d51-f060-4d64-b975-ac4b4cd7617f
      - c332db71-9f87-4c58-afa3-a9f374b0b422
      - c66f3eb6-2a49-4cbe-b677-4b49d912faed
      - c7db6e77-18da-444e-ad5f-8fbfb15e2ece
      - ce55e4f5-9f99-40b9-81fb-6779e96fa603
      - d128bf97-4830-4d62-9ee9-62f3f82545df
      - d339dd11-3bed-40bf-8208-27ece07abd4e
      - d3c8579a-6eb0-4a4c-94fa-d0ada46f4d9a
      - d74d47dc-5402-470b-9a74-3f53d0892033
      - dfd1d798-9229-4d26-8bae-eae543b3f226
      - e2fe147a-7115-4198-9eda-831848a3b9eb
      - e4eeb492-5052-4292-9996-23e65b95f865
      - e5aa7255-c5d9-4f23-afd3-0a986aee76a5
      - e5c0bdc7-9a41-43bf-a554-b923e6af7879
      - f2864ca4-1b08-48b1-bc26-2dd84c59113a
      - f297851e-9e1f-440e-9310-0c2439b19c28
      - f8773324-6d06-4989-b7e6-f655d90d279d
      - fa2e58a2-d583-4205-88d0-83269971e06e
      - fa402e4f-5fd8-475d-9863-32b6a4a8c535
      - fbd280e2-4688-40ee-a2b6-c29ab4ffc69e
  Subgraph-66:
    id: "66"
    name: Ecommerce Extended CWD
    steps:
      - f684c27d-bbbd-4976-8cb3-2f3c765118cd
      - b777ee63-2280-46ae-8451-40a8bbf343a5
      - 005b42cb-b41e-4245-a4e7-19c668d555cf
      - 1c787eb8-995a-4aff-9128-1c224389a7fe
      - c23596d7-66cb-4da6-98d4-a51e85ce8625
      - c33583e7-bb90-467f-a56b-95e0c583884b
      - 83eb2b63-6fc1-402e-ba1f-ac67a549a4ed
      - cb424cf3-e5cb-4079-b566-f708dfca39ed
      - 6726c6c7-5c62-4d27-bffa-e2de629e0994
      - 3af3f674-13d4-4ec4-8625-9a75564f6f27
      - 05c41958-b831-4473-a58b-195813d97920
      - c8b56a60-f603-45e2-bdce-78d7f6d971fb
      - a808bdbd-4cb7-4281-a48b-26254dfd3faf
      - 0e772937-806e-429a-b4f9-e6f02f2863ba
      - b311763f-0a31-4f7e-aefa-7a7d2e83b47c
      - e9d68e73-fc4f-4164-80f6-51ff334030ac
      - 4ae19f63-cfe5-40c8-90d5-a38bf1ad2ba9
      - c560ecfb-20b9-493c-a0e6-b6369c9bf646
      - df88af2a-7134-4a83-ab9f-9ee06b40e2f7
      - 98acb921-2426-4cd0-8dac-d855db2c61d3
      - aaa8ff7a-480c-4974-9801-b78fc3fa6d21
      - 29f83d51-202e-41d1-9360-c3184ecddf2b
      - a57d82b5-bce9-4780-8aff-6d6b5ada5595
      - 37b2fb46-7d30-4d79-b447-56dc49fc8f27
      - 035e2812-e3b5-4c14-9a70-17de0eb76a60
      - 2152522a-efda-4fb6-b0c4-15c30ef6fd7d
      - d83ae8f0-004c-4336-a158-0df55b91b3b7
      - 039f38e8-bd2f-43a2-97da-793b23742aa4
      - 2355f2b5-2a06-4eec-aa30-5bf9ac7dc743
      - d4b4e6c1-ce94-4051-843f-877dbb409c29
      - 160232b4-129a-4514-b750-036cbdac391e
      - 8275f2ca-babe-4b86-958e-7e251f001999
      - b24f754f-c5a9-4efb-83ed-b134f469ab89
  Subgraph-67:
    id: "67"
    name: Ecomm CWD SMD
    steps:
      - de6ec6f8-eb0a-4303-91d8-0d8793cd9060
      - facdca3f-d1d0-4833-9d1c-737e6a01e7c2
      - 9823f249-1968-4055-96f2-70a2aa394916
      - a2b181df-ee1f-45fa-847c-f324f021b1ba
      - 8b3d15c7-05ba-4472-8e83-9f1fd6bd5a34
      - e096ca39-7320-4408-ac4a-b2b289cfcb84
  Subgraph-68:
    id: "68"
    name: EOD Recap Report
    steps:
      - 0c246a5b-a62e-4160-be26-9b26da00cc8c
      - 792c992e-3828-4353-9ecc-c58d8f47a81b
      - b5d66955-4cd0-41b8-98c0-6e32237cf83d
      - 3ce47e13-6007-43a5-9437-784a6038fc91
      - 01871a60-d319-42f8-804a-3db371a44bc5
      - e2459e90-e408-4c4f-bb7a-c763f9e74c40
      - 8ae9ab96-8a5c-4f8e-8f12-09c74be79bae
      - 7608e285-efe4-4100-b06c-9b679eda456e
  Subgraph-69:
    id: "69"
    name: SVC_PROV_REVEEL
    steps:
      - 3d348a4e-b145-4ef3-99c8-e81142a68f0e
      - 2286ec71-3709-4482-a352-39b5481d4c9c
      - 4f36e3cd-9f4c-41e7-9d6c-a4e66368bfca
  Subgraph-7:
    id: "7"
    name: "Netsuite #,A,B,C,D Tables"
    steps:
      - "2344"
      - "2345"
      - "2346"
      - "2347"
      - "2348"
      - "2349"
      - "2350"
      - "2351"
      - "2352"
      - "2353"
      - "2354"
      - "2355"
      - "2356"
      - "2357"
      - "2358"
      - "2359"
      - "2360"
      - "2361"
      - "2362"
      - "2363"
      - "2364"
      - "2365"
      - "2366"
      - "2367"
      - "2368"
      - "2369"
      - "2370"
      - "2371"
      - "2372"
      - "2373"
      - "2374"
      - "2375"
      - "2376"
      - "2377"
      - "2378"
      - "2379"
      - "2380"
      - "2381"
      - "2382"
      - "2383"
      - "2384"
      - "2385"
      - "2386"
      - "2387"
      - "2388"
      - "2389"
      - "2390"
      - "2391"
      - "2392"
      - "2393"
      - "2394"
      - "2395"
      - "2396"
      - "2397"
      - "2398"
      - "2399"
      - "2400"
      - "2401"
      - "2402"
      - "2403"
      - "2404"
      - "2405"
      - "2406"
      - "2407"
      - "2408"
      - "2409"
      - "2410"
      - "2411"
      - "2412"
      - "2413"
      - "2414"
      - "2415"
      - "2416"
      - "2417"
      - "2418"
      - "2419"
      - "2420"
      - "2421"
      - "2422"
      - "2423"
      - "2424"
      - "2425"
      - "2426"
      - "2427"
      - "2428"
      - "2429"
      - "2430"
      - "2431"
      - "2432"
      - "2433"
      - "2434"
      - "2435"
      - "2436"
      - "2437"
      - "2438"
      - "2439"
      - "2440"
      - "2441"
      - "2442"
      - "2443"
      - "2444"
      - "2445"
      - "2446"
      - "2447"
      - "2448"
      - "2449"
      - "2450"
      - "2451"
      - "2452"
      - "2453"
      - "2454"
      - "2455"
      - "2456"
      - "2457"
      - "2458"
      - "2459"
      - "2460"
      - "2461"
      - "2462"
      - "2463"
      - "2464"
      - "2465"
      - "2466"
      - "2467"
      - "2468"
      - "2469"
      - "2470"
      - "2471"
      - "2472"
      - "2473"
      - "2474"
      - "2475"
      - "2476"
      - "2477"
      - "2478"
      - "2479"
      - "2480"
      - "2481"
      - "2482"
      - "2483"
      - "2484"
      - "2485"
      - "2486"
      - "2487"
      - "2488"
      - "2489"
      - "2490"
      - "2491"
      - "2492"
      - "2493"
      - "2494"
      - "2495"
      - "2496"
      - "2497"
      - "2498"
      - "2499"
      - "2500"
      - "2501"
      - "2502"
      - "2503"
      - "2504"
      - "2505"
      - "2506"
      - "2507"
      - "2508"
      - "2509"
      - "2510"
      - "2511"
      - "2512"
      - "2513"
      - "2514"
      - "2515"
      - "2516"
      - "2517"
      - "2518"
      - "2519"
      - "2520"
      - "2521"
      - "2522"
      - "2523"
      - "3022"
      - "3023"
      - "3024"
      - "3025"
      - "3026"
      - "3027"
      - "3028"
      - "3029"
      - "3030"
      - "3031"
      - "3032"
      - "3033"
      - "3034"
      - "3035"
      - "3036"
      - "3037"
      - "3038"
      - "3039"
      - "3040"
      - "3041"
      - "3042"
      - "3043"
      - "3044"
      - "3045"
      - "3046"
      - "3047"
      - "3048"
      - "3049"
      - "3050"
      - "3051"
      - "3052"
      - "3053"
      - "3054"
      - "3055"
      - "3056"
      - "3057"
      - "3058"
      - "3059"
      - "3060"
      - "3061"
      - "3062"
      - "3063"
      - "3065"
      - "3066"
      - "3067"
      - "3068"
      - "3069"
      - "3070"
      - "3071"
      - "3072"
      - "3073"
      - "3074"
      - "3075"
      - "3076"
      - "3077"
      - "3078"
      - "3079"
      - "3080"
      - "3081"
      - "3082"
      - "3083"
      - "3084"
      - "3085"
      - "3086"
      - "3087"
      - "3088"
      - "3089"
      - "3090"
      - "3091"
      - "3092"
      - "3093"
      - "3094"
      - "3095"
      - "3096"
      - "3097"
      - "3098"
      - "3099"
      - "3100"
      - "3101"
      - "3102"
      - "3103"
      - "3104"
      - "3105"
      - "3106"
      - "3107"
      - "3108"
      - "3109"
      - "3110"
      - "3111"
      - "3112"
      - "3113"
      - "3114"
      - "3115"
      - "3116"
      - "3117"
      - "3118"
      - "3119"
      - "3120"
      - "3121"
      - "3122"
      - "3123"
      - "3124"
      - "3125"
      - "3126"
      - "3127"
      - "3128"
      - "3129"
      - "3130"
      - "3131"
      - "3132"
      - "3133"
      - "3134"
      - "3135"
      - "3136"
      - "3137"
      - "3138"
      - "3139"
      - "3140"
      - "3141"
      - "3142"
      - "3143"
      - "3144"
      - "3145"
      - "3146"
      - "3147"
      - "3148"
      - "3149"
      - "3150"
      - "3151"
      - "3152"
      - "3153"
      - "3154"
      - "3155"
      - "3156"
      - "3157"
      - "3158"
      - "3159"
      - "3160"
      - "3161"
      - "3162"
      - "3163"
      - "3164"
      - "3165"
      - "3166"
      - "3167"
      - "3168"
      - "3169"
      - "3170"
      - "3171"
      - "3172"
      - "3173"
      - "3174"
      - "3175"
      - "3176"
      - "3177"
      - "3178"
      - "3179"
      - "3180"
      - "3181"
      - "3182"
      - "3183"
      - "3184"
      - "3185"
      - "3186"
      - "3187"
      - "3188"
      - "3189"
      - "3190"
      - "3191"
      - "3192"
      - "3193"
      - "3194"
      - "3195"
      - "3196"
      - "3197"
      - "3198"
      - "3199"
      - "3200"
      - "3201"
      - "3224"
      - "3225"
      - "3226"
      - "3227"
      - "3228"
      - "3229"
      - "3230"
      - "3231"
      - "3232"
      - "3233"
      - "3234"
      - "3235"
      - "3236"
      - "3237"
      - "3238"
      - "3239"
      - "3240"
      - "3241"
      - "3242"
      - "3243"
      - "3244"
      - "3245"
      - "3246"
      - "3247"
      - "3248"
      - "3249"
      - "3250"
      - "3251"
      - "3252"
      - "3253"
      - "3254"
      - "3255"
      - "3256"
      - "3257"
      - "3258"
      - "3259"
      - "3260"
      - "3261"
      - "3262"
      - "3263"
      - "3264"
      - "3265"
      - "3266"
      - "3267"
      - "3268"
      - "3269"
      - "3270"
      - "3271"
      - "3272"
      - "3273"
      - "3274"
      - "3275"
      - "3276"
      - "3277"
      - "3278"
      - "3279"
      - "3280"
      - "3281"
      - "3282"
      - "3283"
      - "3284"
      - "3285"
      - "3286"
      - "3287"
      - "3288"
      - "3289"
      - "3290"
      - "3291"
      - "3292"
      - "3293"
      - "3294"
      - "3295"
      - "3296"
      - "3297"
      - "3298"
      - "3299"
      - "3300"
      - "3301"
      - "3302"
      - "3303"
      - "3304"
      - "3305"
      - "3306"
      - "3307"
      - "3308"
      - "3309"
      - "3310"
      - "3311"
      - "3312"
      - "3313"
      - "3314"
      - "3315"
      - "3316"
      - "3317"
      - "3318"
      - "3319"
      - "3320"
      - "3321"
      - "3322"
      - "3323"
      - "3324"
      - "3325"
      - "3326"
      - "3327"
      - "3328"
      - "3329"
      - "3330"
      - "3331"
      - "3332"
      - "3333"
      - "3334"
      - "3335"
      - "3336"
      - "3337"
      - "3338"
      - "3339"
      - "3340"
      - "3341"
      - "3342"
      - "3343"
      - "3344"
      - "3345"
      - "3346"
      - "3347"
      - "3348"
      - "3349"
      - "3350"
      - "3351"
      - "3352"
      - "3353"
      - "3354"
      - "3355"
      - "3356"
      - "3357"
      - "3358"
      - "3359"
      - "3360"
      - "3361"
      - "4297"
  Subgraph-70:
    id: "70"
    name: Paycom Labor Report
    steps:
      - 79c7994f-7388-47f5-a3bb-15d5836654c4
      - 595b3fe0-d997-4b24-9626-109680d01f6f
      - 57859fba-2fb7-4234-855c-960db897aa71
      - cf0a34be-ff38-4323-a4a1-e4eb5596856e
      - 98007d24-b9c3-4763-a12a-37ae2b349a2a
  Subgraph-71:
    id: "71"
    name: Paycom Closed Period Labor Report
    steps:
      - a0b16a09-d83b-47b9-bb42-3b1c43b7681e
      - 9eeab7c4-d73a-4399-a634-ea42af2ac4f5
      - 61c57f7b-ed37-44b9-9478-24b88d1e4da8
  Subgraph-73:
    id: "73"
    name: Ecommerce ANWD
    steps:
      - dc20ae18-1ddf-4b2f-ae95-d27e12cc53f2
      - 31819e7e-fc50-4e84-bbbe-d43cd4978e17
      - afe41cbc-fd69-43a5-afc1-1738c55a822a
      - 5336202b-44bc-4d2a-b72d-c415a7c027de
      - 60057f7f-52f5-4b4c-a60e-56ae8843b976
      - 01055846-a1d1-4bdc-a0bc-9d07aa5d037c
      - 380e575a-5d04-49e8-bc0b-1d2118977bf4
      - c2fb0e71-da34-4888-ac7e-c9079490f073
      - 713f5a2a-dcd9-49d5-a9fd-3723ef12efc9
      - a08fc2cc-5435-4733-9c59-a6db11f5c72a
      - 66e240da-1e33-47b5-a12d-e7b5fed1f3de
      - 1d8eecc0-187d-4ef8-b9c6-115b1d411119
      - 32baf001-00b8-46b0-9f9e-08311732b65e
      - 81f6ced9-3ee7-4c97-ba1b-2997e8ab37f1
      - b468bc5d-2e6e-4876-9ff7-0029408af161
      - 96b4373d-ac23-45b7-9569-8c40d818712f
      - 5367290c-09c4-41b1-a27d-9d6ed8156c04
      - e0f30b3a-8a4e-4fc0-ae04-f84e31fa01c6
      - 017c47ee-1a06-4ff6-b8cf-0d832a7db87a
      - fd8b3c83-e52b-4d38-be3c-f50d03fb09d0
      - c1860e21-477b-45ab-ab22-56110c913aa9
      - 87add7db-4f7b-4d34-8cb7-3b57dcc941c6
      - 7e63e3f1-c4af-42a7-941e-048be8d52c2e
      - bd1433cf-fceb-48f8-81f2-8e6820807c23
      - 9a37cb3d-7bdd-4ea8-b3b0-db41c1e7315c
      - 17361b03-814e-45fd-ad7d-c688ee49b421
      - e329386c-c2e5-4a54-a51f-b488e6b3632d
      - cc07caa3-106b-4549-adef-c44729f75d26
      - e6b4d8b9-9385-4d24-adbe-54622400f9bf
      - 2519dfe6-1931-4139-abaf-c97a96fe47fd
      - ff0f3296-a000-43b3-b4d9-23f4231761bc
      - 0bad6fee-68eb-47f3-941a-884791156db2
      - 522cbbfc-28da-4503-a026-6b18ae2ddb7b
      - 20cd3f76-7136-4d7d-8122-b3daba430f7b
      - e26e9233-07a2-4e46-95d4-6ba479231a93
      - f7d0e7d7-505b-4764-af00-1d8d0f4cf137
      - e63357de-1ea8-4bfd-80a8-82a962673e79
      - d6a4dcee-38e1-4fe0-8ab3-2c9f2bbaa321
      - a555f024-b061-4739-92a2-cd4b00624e82
  Subgraph-8:
    id: "8"
    name: Netsuite E,F,G Tables
    steps:
      - "2524"
      - "2525"
      - "2526"
      - "2527"
      - "2528"
      - "2529"
      - "2530"
      - "2531"
      - "2532"
      - "2533"
      - "2534"
      - "2535"
      - "2536"
      - "2537"
      - "2538"
      - "2539"
      - "2540"
      - "2541"
      - "2542"
      - "2543"
      - "2544"
      - "2545"
      - "2546"
      - "2547"
      - "2548"
      - "2549"
      - "2550"
      - "2551"
      - "2552"
      - "2553"
      - "2554"
      - "2555"
      - "2556"
      - "2557"
      - "2558"
      - "2559"
      - "2560"
      - "2561"
      - "2562"
      - "2563"
      - "2564"
      - "2565"
      - "2566"
      - "2567"
      - "2568"
      - "2569"
      - "2570"
      - "2571"
      - "2572"
      - "2573"
      - "2574"
      - "2575"
      - "2576"
      - "2577"
      - "2578"
      - "2579"
      - "2580"
      - "2581"
      - "2582"
      - "2583"
      - "2584"
      - "2585"
      - "2586"
      - "2587"
      - "2588"
      - "2589"
      - "2590"
      - "2591"
      - "2592"
      - "2593"
      - "2594"
      - "2595"
      - "2596"
      - "2597"
      - "2598"
      - "2599"
      - "2600"
      - "2601"
      - "2602"
      - "2603"
      - "2604"
      - "2605"
      - "2606"
      - "2607"
      - "2608"
      - "2609"
      - "2610"
      - "2611"
      - "2612"
      - "2613"
      - "2614"
      - "2615"
      - "2616"
      - "2617"
      - "2618"
      - "2619"
      - "2620"
      - "2621"
      - "2622"
      - "2623"
      - "2624"
      - "2625"
      - "2626"
      - "2627"
      - "2628"
      - "2629"
      - "2630"
      - "2631"
      - "2632"
      - "2633"
      - "2634"
      - "2635"
      - "2636"
      - "2637"
      - "2638"
      - "2639"
      - "2640"
      - "2641"
      - "2642"
      - "2643"
      - "2644"
      - "2645"
      - "2646"
      - "2647"
      - "2648"
      - "2649"
      - "2650"
      - "2651"
      - "2652"
      - "2653"
      - "2654"
      - "2655"
      - "3365"
      - "3366"
      - "3367"
      - "3368"
      - "3369"
      - "3370"
      - "3371"
      - "3372"
      - "3373"
      - "3374"
      - "3375"
      - "3376"
      - "3377"
      - "3378"
      - "3379"
      - "3380"
      - "3381"
      - "3382"
      - "3383"
      - "3384"
      - "3385"
      - "3386"
      - "3387"
      - "3388"
      - "3389"
      - "3390"
      - "3391"
      - "3392"
      - "3393"
      - "3394"
      - "3395"
      - "3396"
      - "3397"
      - "3398"
      - "3399"
      - "3400"
      - "3401"
      - "3402"
      - "3403"
      - "3404"
      - "3405"
      - "3406"
      - "3407"
      - "3408"
      - "3409"
      - "3410"
      - "3411"
      - "3412"
      - "3413"
      - "3414"
      - "3415"
      - "3416"
      - "3417"
      - "3418"
      - "3419"
      - "3420"
      - "3421"
      - "3422"
      - "3423"
      - "3424"
      - "3425"
      - "3426"
      - "3427"
      - "3428"
      - "3429"
      - "3430"
      - "3431"
      - "3432"
      - "3433"
      - "3434"
      - "3435"
      - "3436"
      - "3437"
      - "3438"
      - "3439"
      - "3440"
      - "3441"
      - "3442"
      - "3443"
      - "3444"
      - "3445"
      - "3446"
      - "3447"
      - "3448"
      - "3449"
      - "3450"
      - "3451"
      - "3452"
      - "3453"
      - "3454"
      - "3455"
      - "3456"
      - "3457"
      - "3458"
      - "3459"
      - "3460"
      - "3461"
      - "3462"
      - "3463"
      - "3464"
      - "3465"
      - "3466"
      - "3467"
      - "3468"
      - "3469"
      - "3470"
      - "3471"
      - "3472"
      - "3473"
      - "3474"
      - "3475"
      - "3476"
      - "3477"
      - "3478"
      - "3479"
      - "3480"
      - "3481"
      - "3482"
      - "3483"
      - "3484"
      - "3485"
      - "3486"
      - "3487"
      - "3488"
      - "3489"
      - "3490"
      - "3491"
      - "3492"
      - "3493"
      - "3494"
      - "3495"
      - "3496"
  Subgraph-9:
    id: "9"
    name: Netsuite I,J,K,L,M Tables
    steps:
      - "2656"
      - "2657"
      - "2658"
      - "2659"
      - "2660"
      - "2661"
      - "2662"
      - "2663"
      - "2664"
      - "2665"
      - "2666"
      - "2667"
      - "2668"
      - "2669"
      - "2670"
      - "2671"
      - "2672"
      - "2673"
      - "2674"
      - "2675"
      - "2676"
      - "2677"
      - "2678"
      - "2679"
      - "2680"
      - "2681"
      - "2682"
      - "2683"
      - "2684"
      - "2685"
      - "2686"
      - "2687"
      - "2688"
      - "2689"
      - "2690"
      - "2691"
      - "2692"
      - "2693"
      - "2694"
      - "2695"
      - "2696"
      - "2697"
      - "2698"
      - "2699"
      - "2700"
      - "2701"
      - "2702"
      - "2703"
      - "2704"
      - "2705"
      - "2706"
      - "2707"
      - "2708"
      - "2709"
      - "2710"
      - "2711"
      - "2712"
      - "2713"
      - "2714"
      - "2715"
      - "2716"
      - "2717"
      - "2718"
      - "2719"
      - "2720"
      - "2721"
      - "2722"
      - "2723"
      - "2724"
      - "2725"
      - "2726"
      - "2727"
      - "2728"
      - "2729"
      - "2730"
      - "2731"
      - "2732"
      - "2733"
      - "2734"
      - "3501"
      - "3502"
      - "3503"
      - "3504"
      - "3505"
      - "3506"
      - "3507"
      - "3508"
      - "3509"
      - "3510"
      - "3511"
      - "3512"
      - "3513"
      - "3514"
      - "3515"
      - "3516"
      - "3517"
      - "3518"
      - "3519"
      - "3520"
      - "3521"
      - "3522"
      - "3523"
      - "3524"
      - "3525"
      - "3526"
      - "3527"
      - "3528"
      - "3529"
      - "3530"
      - "3531"
      - "3532"
      - "3533"
      - "3534"
      - "3535"
      - "3536"
      - "3537"
      - "3538"
      - "3539"
      - "3540"
      - "3541"
      - "3542"
      - "3543"
      - "3544"
      - "3545"
      - "3546"
      - "3547"
      - "3548"
      - "3549"
      - "3550"
      - "3551"
      - "3552"
      - "3553"
      - "3554"
      - "3555"
      - "3556"
      - "3557"
      - "3558"
      - "3559"
      - "3560"
      - "3561"
      - "3562"
      - "3563"
      - "3564"
      - "3565"
      - "3566"
      - "3567"
      - "3568"
      - "3569"
      - "3570"
      - "3571"
      - "3572"
      - "3573"
      - "3574"
      - "3575"
      - "3576"
      - "3577"
      - "3578"
      - "3579"
version: 2
